// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPlayerteams(t *testing.T) {
	t.Parallel()

	query := Playerteams()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPlayerteamsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playerteam{}
	if err = randomize.Struct(seed, o, playerteamDBTypes, true, playerteamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Playerteams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlayerteamsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playerteam{}
	if err = randomize.Struct(seed, o, playerteamDBTypes, true, playerteamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Playerteams().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Playerteams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlayerteamsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playerteam{}
	if err = randomize.Struct(seed, o, playerteamDBTypes, true, playerteamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlayerteamSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Playerteams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlayerteamsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playerteam{}
	if err = randomize.Struct(seed, o, playerteamDBTypes, true, playerteamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PlayerteamExists(ctx, tx, o.PlayerID, o.TeamID, o.GameID)
	if err != nil {
		t.Errorf("Unable to check if Playerteam exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PlayerteamExists to return true, but got false.")
	}
}

func testPlayerteamsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playerteam{}
	if err = randomize.Struct(seed, o, playerteamDBTypes, true, playerteamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	playerteamFound, err := FindPlayerteam(ctx, tx, o.PlayerID, o.TeamID, o.GameID)
	if err != nil {
		t.Error(err)
	}

	if playerteamFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPlayerteamsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playerteam{}
	if err = randomize.Struct(seed, o, playerteamDBTypes, true, playerteamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Playerteams().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPlayerteamsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playerteam{}
	if err = randomize.Struct(seed, o, playerteamDBTypes, true, playerteamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Playerteams().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPlayerteamsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playerteamOne := &Playerteam{}
	playerteamTwo := &Playerteam{}
	if err = randomize.Struct(seed, playerteamOne, playerteamDBTypes, false, playerteamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}
	if err = randomize.Struct(seed, playerteamTwo, playerteamDBTypes, false, playerteamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = playerteamOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = playerteamTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Playerteams().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPlayerteamsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playerteamOne := &Playerteam{}
	playerteamTwo := &Playerteam{}
	if err = randomize.Struct(seed, playerteamOne, playerteamDBTypes, false, playerteamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}
	if err = randomize.Struct(seed, playerteamTwo, playerteamDBTypes, false, playerteamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = playerteamOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = playerteamTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Playerteams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func playerteamBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Playerteam) error {
	*o = Playerteam{}
	return nil
}

func playerteamAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Playerteam) error {
	*o = Playerteam{}
	return nil
}

func playerteamAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Playerteam) error {
	*o = Playerteam{}
	return nil
}

func playerteamBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Playerteam) error {
	*o = Playerteam{}
	return nil
}

func playerteamAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Playerteam) error {
	*o = Playerteam{}
	return nil
}

func playerteamBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Playerteam) error {
	*o = Playerteam{}
	return nil
}

func playerteamAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Playerteam) error {
	*o = Playerteam{}
	return nil
}

func playerteamBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Playerteam) error {
	*o = Playerteam{}
	return nil
}

func playerteamAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Playerteam) error {
	*o = Playerteam{}
	return nil
}

func testPlayerteamsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Playerteam{}
	o := &Playerteam{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, playerteamDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Playerteam object: %s", err)
	}

	AddPlayerteamHook(boil.BeforeInsertHook, playerteamBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	playerteamBeforeInsertHooks = []PlayerteamHook{}

	AddPlayerteamHook(boil.AfterInsertHook, playerteamAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	playerteamAfterInsertHooks = []PlayerteamHook{}

	AddPlayerteamHook(boil.AfterSelectHook, playerteamAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	playerteamAfterSelectHooks = []PlayerteamHook{}

	AddPlayerteamHook(boil.BeforeUpdateHook, playerteamBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	playerteamBeforeUpdateHooks = []PlayerteamHook{}

	AddPlayerteamHook(boil.AfterUpdateHook, playerteamAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	playerteamAfterUpdateHooks = []PlayerteamHook{}

	AddPlayerteamHook(boil.BeforeDeleteHook, playerteamBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	playerteamBeforeDeleteHooks = []PlayerteamHook{}

	AddPlayerteamHook(boil.AfterDeleteHook, playerteamAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	playerteamAfterDeleteHooks = []PlayerteamHook{}

	AddPlayerteamHook(boil.BeforeUpsertHook, playerteamBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	playerteamBeforeUpsertHooks = []PlayerteamHook{}

	AddPlayerteamHook(boil.AfterUpsertHook, playerteamAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	playerteamAfterUpsertHooks = []PlayerteamHook{}
}

func testPlayerteamsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playerteam{}
	if err = randomize.Struct(seed, o, playerteamDBTypes, true, playerteamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Playerteams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlayerteamsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playerteam{}
	if err = randomize.Struct(seed, o, playerteamDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(playerteamColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Playerteams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlayerteamToOneGameUsingGameID(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Playerteam
	var foreign Game

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, playerteamDBTypes, false, playerteamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, gameDBTypes, false, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GameID = foreign.GameID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.GameID().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.GameID != foreign.GameID {
		t.Errorf("want: %v, got %v", foreign.GameID, check.GameID)
	}

	slice := PlayerteamSlice{&local}
	if err = local.L.LoadGameID(ctx, tx, false, (*[]*Playerteam)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.GameID == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.GameID = nil
	if err = local.L.LoadGameID(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.GameID == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPlayerteamToOnePlayerUsingPlayerID(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Playerteam
	var foreign Player

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, playerteamDBTypes, false, playerteamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PlayerID = foreign.PlayerID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.PlayerID().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PlayerID != foreign.PlayerID {
		t.Errorf("want: %v, got %v", foreign.PlayerID, check.PlayerID)
	}

	slice := PlayerteamSlice{&local}
	if err = local.L.LoadPlayerID(ctx, tx, false, (*[]*Playerteam)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PlayerID == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.PlayerID = nil
	if err = local.L.LoadPlayerID(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PlayerID == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPlayerteamToOneTeamUsingTeamID(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Playerteam
	var foreign Team

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, playerteamDBTypes, false, playerteamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TeamID = foreign.TeamID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.TeamID().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.TeamID != foreign.TeamID {
		t.Errorf("want: %v, got %v", foreign.TeamID, check.TeamID)
	}

	slice := PlayerteamSlice{&local}
	if err = local.L.LoadTeamID(ctx, tx, false, (*[]*Playerteam)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.TeamID == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.TeamID = nil
	if err = local.L.LoadTeamID(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.TeamID == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPlayerteamToOneSetOpGameUsingGameID(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Playerteam
	var b, c Game

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerteamDBTypes, false, strmangle.SetComplement(playerteamPrimaryKeyColumns, playerteamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Game{&b, &c} {
		err = a.SetGameID(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.GameID != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GameIDPlayerteams[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GameID != x.GameID {
			t.Error("foreign key was wrong value", a.GameID)
		}

		if exists, err := PlayerteamExists(ctx, tx, a.PlayerID, a.TeamID, a.GameID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testPlayerteamToOneSetOpPlayerUsingPlayerID(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Playerteam
	var b, c Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerteamDBTypes, false, strmangle.SetComplement(playerteamPrimaryKeyColumns, playerteamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Player{&b, &c} {
		err = a.SetPlayerID(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.PlayerID != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PlayerIDPlayerteams[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PlayerID != x.PlayerID {
			t.Error("foreign key was wrong value", a.PlayerID)
		}

		if exists, err := PlayerteamExists(ctx, tx, a.PlayerID, a.TeamID, a.GameID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testPlayerteamToOneSetOpTeamUsingTeamID(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Playerteam
	var b, c Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerteamDBTypes, false, strmangle.SetComplement(playerteamPrimaryKeyColumns, playerteamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Team{&b, &c} {
		err = a.SetTeamID(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.TeamID != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TeamIDPlayerteams[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TeamID != x.TeamID {
			t.Error("foreign key was wrong value", a.TeamID)
		}

		if exists, err := PlayerteamExists(ctx, tx, a.PlayerID, a.TeamID, a.GameID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testPlayerteamsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playerteam{}
	if err = randomize.Struct(seed, o, playerteamDBTypes, true, playerteamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPlayerteamsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playerteam{}
	if err = randomize.Struct(seed, o, playerteamDBTypes, true, playerteamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlayerteamSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPlayerteamsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Playerteam{}
	if err = randomize.Struct(seed, o, playerteamDBTypes, true, playerteamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Playerteams().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	playerteamDBTypes = map[string]string{`PlayerID`: `int`, `TeamID`: `int`, `GameID`: `int`}
	_                 = bytes.MinRead
)

func testPlayerteamsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(playerteamPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(playerteamAllColumns) == len(playerteamPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Playerteam{}
	if err = randomize.Struct(seed, o, playerteamDBTypes, true, playerteamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Playerteams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, playerteamDBTypes, true, playerteamPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPlayerteamsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(playerteamAllColumns) == len(playerteamPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Playerteam{}
	if err = randomize.Struct(seed, o, playerteamDBTypes, true, playerteamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Playerteams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, playerteamDBTypes, true, playerteamPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(playerteamAllColumns, playerteamPrimaryKeyColumns) {
		fields = playerteamAllColumns
	} else {
		fields = strmangle.SetComplement(
			playerteamAllColumns,
			playerteamPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PlayerteamSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPlayerteamsUpsert(t *testing.T) {
	t.Parallel()

	if len(playerteamAllColumns) == len(playerteamPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLPlayerteamUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Playerteam{}
	if err = randomize.Struct(seed, &o, playerteamDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Playerteam: %s", err)
	}

	count, err := Playerteams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, playerteamDBTypes, false, playerteamPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Playerteam struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Playerteam: %s", err)
	}

	count, err = Playerteams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
