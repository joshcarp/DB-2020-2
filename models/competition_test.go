// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCompetitions(t *testing.T) {
	t.Parallel()

	query := Competitions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCompetitionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Competition{}
	if err = randomize.Struct(seed, o, competitionDBTypes, true, competitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Competitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompetitionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Competition{}
	if err = randomize.Struct(seed, o, competitionDBTypes, true, competitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Competitions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Competitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompetitionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Competition{}
	if err = randomize.Struct(seed, o, competitionDBTypes, true, competitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CompetitionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Competitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompetitionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Competition{}
	if err = randomize.Struct(seed, o, competitionDBTypes, true, competitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CompetitionExists(ctx, tx, o.CompetitionID)
	if err != nil {
		t.Errorf("Unable to check if Competition exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CompetitionExists to return true, but got false.")
	}
}

func testCompetitionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Competition{}
	if err = randomize.Struct(seed, o, competitionDBTypes, true, competitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	competitionFound, err := FindCompetition(ctx, tx, o.CompetitionID)
	if err != nil {
		t.Error(err)
	}

	if competitionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCompetitionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Competition{}
	if err = randomize.Struct(seed, o, competitionDBTypes, true, competitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Competitions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCompetitionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Competition{}
	if err = randomize.Struct(seed, o, competitionDBTypes, true, competitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Competitions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCompetitionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	competitionOne := &Competition{}
	competitionTwo := &Competition{}
	if err = randomize.Struct(seed, competitionOne, competitionDBTypes, false, competitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}
	if err = randomize.Struct(seed, competitionTwo, competitionDBTypes, false, competitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = competitionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = competitionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Competitions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCompetitionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	competitionOne := &Competition{}
	competitionTwo := &Competition{}
	if err = randomize.Struct(seed, competitionOne, competitionDBTypes, false, competitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}
	if err = randomize.Struct(seed, competitionTwo, competitionDBTypes, false, competitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = competitionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = competitionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Competitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func competitionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Competition) error {
	*o = Competition{}
	return nil
}

func competitionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Competition) error {
	*o = Competition{}
	return nil
}

func competitionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Competition) error {
	*o = Competition{}
	return nil
}

func competitionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Competition) error {
	*o = Competition{}
	return nil
}

func competitionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Competition) error {
	*o = Competition{}
	return nil
}

func competitionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Competition) error {
	*o = Competition{}
	return nil
}

func competitionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Competition) error {
	*o = Competition{}
	return nil
}

func competitionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Competition) error {
	*o = Competition{}
	return nil
}

func competitionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Competition) error {
	*o = Competition{}
	return nil
}

func testCompetitionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Competition{}
	o := &Competition{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, competitionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Competition object: %s", err)
	}

	AddCompetitionHook(boil.BeforeInsertHook, competitionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	competitionBeforeInsertHooks = []CompetitionHook{}

	AddCompetitionHook(boil.AfterInsertHook, competitionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	competitionAfterInsertHooks = []CompetitionHook{}

	AddCompetitionHook(boil.AfterSelectHook, competitionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	competitionAfterSelectHooks = []CompetitionHook{}

	AddCompetitionHook(boil.BeforeUpdateHook, competitionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	competitionBeforeUpdateHooks = []CompetitionHook{}

	AddCompetitionHook(boil.AfterUpdateHook, competitionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	competitionAfterUpdateHooks = []CompetitionHook{}

	AddCompetitionHook(boil.BeforeDeleteHook, competitionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	competitionBeforeDeleteHooks = []CompetitionHook{}

	AddCompetitionHook(boil.AfterDeleteHook, competitionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	competitionAfterDeleteHooks = []CompetitionHook{}

	AddCompetitionHook(boil.BeforeUpsertHook, competitionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	competitionBeforeUpsertHooks = []CompetitionHook{}

	AddCompetitionHook(boil.AfterUpsertHook, competitionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	competitionAfterUpsertHooks = []CompetitionHook{}
}

func testCompetitionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Competition{}
	if err = randomize.Struct(seed, o, competitionDBTypes, true, competitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Competitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompetitionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Competition{}
	if err = randomize.Struct(seed, o, competitionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(competitionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Competitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompetitionToManyCompetitionIDSeasons(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Competition
	var b, c Season

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, competitionDBTypes, true, competitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, seasonDBTypes, false, seasonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, seasonDBTypes, false, seasonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CompetitionID = a.CompetitionID
	c.CompetitionID = a.CompetitionID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CompetitionIDSeasons().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CompetitionID == b.CompetitionID {
			bFound = true
		}
		if v.CompetitionID == c.CompetitionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CompetitionSlice{&a}
	if err = a.L.LoadCompetitionIDSeasons(ctx, tx, false, (*[]*Competition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CompetitionIDSeasons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CompetitionIDSeasons = nil
	if err = a.L.LoadCompetitionIDSeasons(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CompetitionIDSeasons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCompetitionToManyAddOpCompetitionIDSeasons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Competition
	var b, c, d, e Season

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, competitionDBTypes, false, strmangle.SetComplement(competitionPrimaryKeyColumns, competitionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Season{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, seasonDBTypes, false, strmangle.SetComplement(seasonPrimaryKeyColumns, seasonColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Season{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCompetitionIDSeasons(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.CompetitionID != first.CompetitionID {
			t.Error("foreign key was wrong value", a.CompetitionID, first.CompetitionID)
		}
		if a.CompetitionID != second.CompetitionID {
			t.Error("foreign key was wrong value", a.CompetitionID, second.CompetitionID)
		}

		if first.R.CompetitionID != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CompetitionID != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CompetitionIDSeasons[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CompetitionIDSeasons[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CompetitionIDSeasons().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCompetitionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Competition{}
	if err = randomize.Struct(seed, o, competitionDBTypes, true, competitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCompetitionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Competition{}
	if err = randomize.Struct(seed, o, competitionDBTypes, true, competitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CompetitionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCompetitionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Competition{}
	if err = randomize.Struct(seed, o, competitionDBTypes, true, competitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Competitions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	competitionDBTypes = map[string]string{`CompetitionID`: `int`, `CompetitionName`: `varchar`, `CompetitionType`: `varchar`}
	_                  = bytes.MinRead
)

func testCompetitionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(competitionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(competitionAllColumns) == len(competitionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Competition{}
	if err = randomize.Struct(seed, o, competitionDBTypes, true, competitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Competitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, competitionDBTypes, true, competitionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCompetitionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(competitionAllColumns) == len(competitionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Competition{}
	if err = randomize.Struct(seed, o, competitionDBTypes, true, competitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Competitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, competitionDBTypes, true, competitionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(competitionAllColumns, competitionPrimaryKeyColumns) {
		fields = competitionAllColumns
	} else {
		fields = strmangle.SetComplement(
			competitionAllColumns,
			competitionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CompetitionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCompetitionsUpsert(t *testing.T) {
	t.Parallel()

	if len(competitionAllColumns) == len(competitionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLCompetitionUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Competition{}
	if err = randomize.Struct(seed, &o, competitionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Competition: %s", err)
	}

	count, err := Competitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, competitionDBTypes, false, competitionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Competition: %s", err)
	}

	count, err = Competitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
