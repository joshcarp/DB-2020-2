// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Playerteam is an object representing the database table.
type Playerteam struct {
	PlayerID int `boil:"PlayerID" json:"PlayerID" toml:"PlayerID" yaml:"PlayerID"`
	TeamID   int `boil:"TeamID" json:"TeamID" toml:"TeamID" yaml:"TeamID"`
	GameID   int `boil:"GameID" json:"GameID" toml:"GameID" yaml:"GameID"`

	R *playerteamR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L playerteamL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlayerteamColumns = struct {
	PlayerID string
	TeamID   string
	GameID   string
}{
	PlayerID: "PlayerID",
	TeamID:   "TeamID",
	GameID:   "GameID",
}

// Generated where

var PlayerteamWhere = struct {
	PlayerID whereHelperint
	TeamID   whereHelperint
	GameID   whereHelperint
}{
	PlayerID: whereHelperint{field: "`playerteam`.`PlayerID`"},
	TeamID:   whereHelperint{field: "`playerteam`.`TeamID`"},
	GameID:   whereHelperint{field: "`playerteam`.`GameID`"},
}

// PlayerteamRels is where relationship names are stored.
var PlayerteamRels = struct {
	GameID   string
	PlayerID string
	TeamID   string
}{
	GameID:   "GameID",
	PlayerID: "PlayerID",
	TeamID:   "TeamID",
}

// playerteamR is where relationships are stored.
type playerteamR struct {
	GameID   *Game
	PlayerID *Player
	TeamID   *Team
}

// NewStruct creates a new relationship struct
func (*playerteamR) NewStruct() *playerteamR {
	return &playerteamR{}
}

// playerteamL is where Load methods for each relationship are stored.
type playerteamL struct{}

var (
	playerteamAllColumns            = []string{"PlayerID", "TeamID", "GameID"}
	playerteamColumnsWithoutDefault = []string{"PlayerID", "TeamID", "GameID"}
	playerteamColumnsWithDefault    = []string{}
	playerteamPrimaryKeyColumns     = []string{"PlayerID", "TeamID", "GameID"}
)

type (
	// PlayerteamSlice is an alias for a slice of pointers to Playerteam.
	// This should generally be used opposed to []Playerteam.
	PlayerteamSlice []*Playerteam
	// PlayerteamHook is the signature for custom Playerteam hook methods
	PlayerteamHook func(context.Context, boil.ContextExecutor, *Playerteam) error

	playerteamQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playerteamType                 = reflect.TypeOf(&Playerteam{})
	playerteamMapping              = queries.MakeStructMapping(playerteamType)
	playerteamPrimaryKeyMapping, _ = queries.BindMapping(playerteamType, playerteamMapping, playerteamPrimaryKeyColumns)
	playerteamInsertCacheMut       sync.RWMutex
	playerteamInsertCache          = make(map[string]insertCache)
	playerteamUpdateCacheMut       sync.RWMutex
	playerteamUpdateCache          = make(map[string]updateCache)
	playerteamUpsertCacheMut       sync.RWMutex
	playerteamUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var playerteamBeforeInsertHooks []PlayerteamHook
var playerteamBeforeUpdateHooks []PlayerteamHook
var playerteamBeforeDeleteHooks []PlayerteamHook
var playerteamBeforeUpsertHooks []PlayerteamHook

var playerteamAfterInsertHooks []PlayerteamHook
var playerteamAfterSelectHooks []PlayerteamHook
var playerteamAfterUpdateHooks []PlayerteamHook
var playerteamAfterDeleteHooks []PlayerteamHook
var playerteamAfterUpsertHooks []PlayerteamHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Playerteam) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerteamBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Playerteam) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerteamBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Playerteam) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerteamBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Playerteam) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerteamBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Playerteam) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerteamAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Playerteam) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerteamAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Playerteam) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerteamAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Playerteam) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerteamAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Playerteam) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerteamAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlayerteamHook registers your hook function for all future operations.
func AddPlayerteamHook(hookPoint boil.HookPoint, playerteamHook PlayerteamHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		playerteamBeforeInsertHooks = append(playerteamBeforeInsertHooks, playerteamHook)
	case boil.BeforeUpdateHook:
		playerteamBeforeUpdateHooks = append(playerteamBeforeUpdateHooks, playerteamHook)
	case boil.BeforeDeleteHook:
		playerteamBeforeDeleteHooks = append(playerteamBeforeDeleteHooks, playerteamHook)
	case boil.BeforeUpsertHook:
		playerteamBeforeUpsertHooks = append(playerteamBeforeUpsertHooks, playerteamHook)
	case boil.AfterInsertHook:
		playerteamAfterInsertHooks = append(playerteamAfterInsertHooks, playerteamHook)
	case boil.AfterSelectHook:
		playerteamAfterSelectHooks = append(playerteamAfterSelectHooks, playerteamHook)
	case boil.AfterUpdateHook:
		playerteamAfterUpdateHooks = append(playerteamAfterUpdateHooks, playerteamHook)
	case boil.AfterDeleteHook:
		playerteamAfterDeleteHooks = append(playerteamAfterDeleteHooks, playerteamHook)
	case boil.AfterUpsertHook:
		playerteamAfterUpsertHooks = append(playerteamAfterUpsertHooks, playerteamHook)
	}
}

// One returns a single playerteam record from the query.
func (q playerteamQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Playerteam, error) {
	o := &Playerteam{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for playerteam")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Playerteam records from the query.
func (q playerteamQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlayerteamSlice, error) {
	var o []*Playerteam

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Playerteam slice")
	}

	if len(playerteamAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Playerteam records in the query.
func (q playerteamQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count playerteam rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playerteamQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if playerteam exists")
	}

	return count > 0, nil
}

//// GameID pointed to by the foreign key.
//func (o *Playerteam) GameID(mods ...qm.QueryMod) gameQuery {
//	queryMods := []qm.QueryMod{
//		qm.Where("`GameID` = ?", o.GameID),
//	}
//
//	queryMods = append(queryMods, mods...)
//
//	query := Games(queryMods...)
//	queries.SetFrom(query.Query, "`game`")
//
//	return query
//}
//
//// PlayerID pointed to by the foreign key.
//func (o *Playerteam) PlayerID(mods ...qm.QueryMod) playerQuery {
//	queryMods := []qm.QueryMod{
//		qm.Where("`PlayerID` = ?", o.PlayerID),
//	}
//
//	queryMods = append(queryMods, mods...)
//
//	query := Players(queryMods...)
//	queries.SetFrom(query.Query, "`player`")
//
//	return query
//}

// TeamID pointed to by the foreign key.
//func (o *Playerteam) TeamID(mods ...qm.QueryMod) teamQuery {
//	queryMods := []qm.QueryMod{
//		qm.Where("`TeamID` = ?", o.TeamID),
//	}
//
//	queryMods = append(queryMods, mods...)
//
//	query := Teams(queryMods...)
//	queries.SetFrom(query.Query, "`team`")
//
//	return query
//}

// LoadGameID allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerteamL) LoadGameID(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlayerteam interface{}, mods queries.Applicator) error {
	var slice []*Playerteam
	var object *Playerteam

	if singular {
		object = maybePlayerteam.(*Playerteam)
	} else {
		slice = *maybePlayerteam.(*[]*Playerteam)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerteamR{}
		}
		args = append(args, object.GameID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerteamR{}
			}

			for _, a := range args {
				if a == obj.GameID {
					continue Outer
				}
			}

			args = append(args, obj.GameID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`game`), qm.WhereIn(`game.GameID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Game")
	}

	var resultSlice []*Game
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Game")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for game")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game")
	}

	if len(playerteamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GameID = foreign
		if foreign.R == nil {
			foreign.R = &gameR{}
		}
		foreign.R.GameIDPlayerteams = append(foreign.R.GameIDPlayerteams, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GameID == foreign.GameID {
				local.R.GameID = foreign
				if foreign.R == nil {
					foreign.R = &gameR{}
				}
				foreign.R.GameIDPlayerteams = append(foreign.R.GameIDPlayerteams, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayerID allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerteamL) LoadPlayerID(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlayerteam interface{}, mods queries.Applicator) error {
	var slice []*Playerteam
	var object *Playerteam

	if singular {
		object = maybePlayerteam.(*Playerteam)
	} else {
		slice = *maybePlayerteam.(*[]*Playerteam)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerteamR{}
		}
		args = append(args, object.PlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerteamR{}
			}

			for _, a := range args {
				if a == obj.PlayerID {
					continue Outer
				}
			}

			args = append(args, obj.PlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`player`), qm.WhereIn(`player.PlayerID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for player")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player")
	}

	if len(playerteamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlayerID = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.PlayerIDPlayerteams = append(foreign.R.PlayerIDPlayerteams, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.PlayerID {
				local.R.PlayerID = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.PlayerIDPlayerteams = append(foreign.R.PlayerIDPlayerteams, local)
				break
			}
		}
	}

	return nil
}

// LoadTeamID allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerteamL) LoadTeamID(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlayerteam interface{}, mods queries.Applicator) error {
	var slice []*Playerteam
	var object *Playerteam

	if singular {
		object = maybePlayerteam.(*Playerteam)
	} else {
		slice = *maybePlayerteam.(*[]*Playerteam)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerteamR{}
		}
		args = append(args, object.TeamID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerteamR{}
			}

			for _, a := range args {
				if a == obj.TeamID {
					continue Outer
				}
			}

			args = append(args, obj.TeamID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`team`), qm.WhereIn(`team.TeamID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for team")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for team")
	}

	if len(playerteamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TeamID = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.TeamIDPlayerteams = append(foreign.R.TeamIDPlayerteams, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TeamID == foreign.TeamID {
				local.R.TeamID = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.TeamIDPlayerteams = append(foreign.R.TeamIDPlayerteams, local)
				break
			}
		}
	}

	return nil
}

// SetGameID of the playerteam to the related item.
// Sets o.R.GameID to related.
// Adds o to related.R.GameIDPlayerteams.
func (o *Playerteam) SetGameID(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Game) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `playerteam` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"GameID"}),
		strmangle.WhereClause("`", "`", 0, playerteamPrimaryKeyColumns),
	)
	values := []interface{}{related.GameID, o.PlayerID, o.TeamID, o.GameID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GameID = related.GameID
	if o.R == nil {
		o.R = &playerteamR{
			GameID: related,
		}
	} else {
		o.R.GameID = related
	}

	if related.R == nil {
		related.R = &gameR{
			GameIDPlayerteams: PlayerteamSlice{o},
		}
	} else {
		related.R.GameIDPlayerteams = append(related.R.GameIDPlayerteams, o)
	}

	return nil
}

// SetPlayerID of the playerteam to the related item.
// Sets o.R.PlayerID to related.
// Adds o to related.R.PlayerIDPlayerteams.
func (o *Playerteam) SetPlayerID(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `playerteam` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PlayerID"}),
		strmangle.WhereClause("`", "`", 0, playerteamPrimaryKeyColumns),
	)
	values := []interface{}{related.PlayerID, o.PlayerID, o.TeamID, o.GameID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.PlayerID
	if o.R == nil {
		o.R = &playerteamR{
			PlayerID: related,
		}
	} else {
		o.R.PlayerID = related
	}

	if related.R == nil {
		related.R = &playerR{
			PlayerIDPlayerteams: PlayerteamSlice{o},
		}
	} else {
		related.R.PlayerIDPlayerteams = append(related.R.PlayerIDPlayerteams, o)
	}

	return nil
}

// SetTeamID of the playerteam to the related item.
// Sets o.R.TeamID to related.
// Adds o to related.R.TeamIDPlayerteams.
func (o *Playerteam) SetTeamID(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `playerteam` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"TeamID"}),
		strmangle.WhereClause("`", "`", 0, playerteamPrimaryKeyColumns),
	)
	values := []interface{}{related.TeamID, o.PlayerID, o.TeamID, o.GameID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TeamID = related.TeamID
	if o.R == nil {
		o.R = &playerteamR{
			TeamID: related,
		}
	} else {
		o.R.TeamID = related
	}

	if related.R == nil {
		related.R = &teamR{
			TeamIDPlayerteams: PlayerteamSlice{o},
		}
	} else {
		related.R.TeamIDPlayerteams = append(related.R.TeamIDPlayerteams, o)
	}

	return nil
}

// Playerteams retrieves all the records using an executor.
func Playerteams(mods ...qm.QueryMod) playerteamQuery {
	mods = append(mods, qm.From("`playerteam`"))
	return playerteamQuery{NewQuery(mods...)}
}

// FindPlayerteam retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlayerteam(ctx context.Context, exec boil.ContextExecutor, playerID int, teamID int, gameID int, selectCols ...string) (*Playerteam, error) {
	playerteamObj := &Playerteam{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `playerteam` where `PlayerID`=? AND `TeamID`=? AND `GameID`=?", sel,
	)

	q := queries.Raw(query, playerID, teamID, gameID)

	err := q.Bind(ctx, exec, playerteamObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from playerteam")
	}

	return playerteamObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Playerteam) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no playerteam provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerteamColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playerteamInsertCacheMut.RLock()
	cache, cached := playerteamInsertCache[key]
	playerteamInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playerteamAllColumns,
			playerteamColumnsWithDefault,
			playerteamColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playerteamType, playerteamMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playerteamType, playerteamMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `playerteam` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `playerteam` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `playerteam` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, playerteamPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into playerteam")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PlayerID,
		o.TeamID,
		o.GameID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for playerteam")
	}

CacheNoHooks:
	if !cached {
		playerteamInsertCacheMut.Lock()
		playerteamInsertCache[key] = cache
		playerteamInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Playerteam.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Playerteam) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	playerteamUpdateCacheMut.RLock()
	cache, cached := playerteamUpdateCache[key]
	playerteamUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playerteamAllColumns,
			playerteamPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update playerteam, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `playerteam` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, playerteamPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playerteamType, playerteamMapping, append(wl, playerteamPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update playerteam row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for playerteam")
	}

	if !cached {
		playerteamUpdateCacheMut.Lock()
		playerteamUpdateCache[key] = cache
		playerteamUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q playerteamQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for playerteam")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for playerteam")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlayerteamSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerteamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `playerteam` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, playerteamPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in playerteam slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all playerteam")
	}
	return rowsAff, nil
}

var mySQLPlayerteamUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Playerteam) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no playerteam provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerteamColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPlayerteamUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playerteamUpsertCacheMut.RLock()
	cache, cached := playerteamUpsertCache[key]
	playerteamUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			playerteamAllColumns,
			playerteamColumnsWithDefault,
			playerteamColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			playerteamAllColumns,
			playerteamPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert playerteam, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "playerteam", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `playerteam` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(playerteamType, playerteamMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playerteamType, playerteamMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for playerteam")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(playerteamType, playerteamMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for playerteam")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for playerteam")
	}

CacheNoHooks:
	if !cached {
		playerteamUpsertCacheMut.Lock()
		playerteamUpsertCache[key] = cache
		playerteamUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Playerteam record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Playerteam) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Playerteam provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playerteamPrimaryKeyMapping)
	sql := "DELETE FROM `playerteam` WHERE `PlayerID`=? AND `TeamID`=? AND `GameID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from playerteam")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for playerteam")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q playerteamQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no playerteamQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from playerteam")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for playerteam")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlayerteamSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(playerteamBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerteamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `playerteam` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, playerteamPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from playerteam slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for playerteam")
	}

	if len(playerteamAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Playerteam) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlayerteam(ctx, exec, o.PlayerID, o.TeamID, o.GameID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayerteamSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlayerteamSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerteamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `playerteam`.* FROM `playerteam` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, playerteamPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PlayerteamSlice")
	}

	*o = slice

	return nil
}

// PlayerteamExists checks if the Playerteam row exists.
func PlayerteamExists(ctx context.Context, exec boil.ContextExecutor, playerID int, teamID int, gameID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `playerteam` where `PlayerID`=? AND `TeamID`=? AND `GameID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, playerID, teamID, gameID)
	}
	row := exec.QueryRowContext(ctx, sql, playerID, teamID, gameID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if playerteam exists")
	}

	return exists, nil
}
