// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPlayers(t *testing.T) {
	t.Parallel()

	query := Players()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPlayersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Players().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlayersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Players().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Players().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlayersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlayerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Players().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlayersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PlayerExists(ctx, tx, o.PlayerID)
	if err != nil {
		t.Errorf("Unable to check if Player exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PlayerExists to return true, but got false.")
	}
}

func testPlayersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	playerFound, err := FindPlayer(ctx, tx, o.PlayerID)
	if err != nil {
		t.Error(err)
	}

	if playerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPlayersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Players().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPlayersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Players().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPlayersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playerOne := &Player{}
	playerTwo := &Player{}
	if err = randomize.Struct(seed, playerOne, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}
	if err = randomize.Struct(seed, playerTwo, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = playerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = playerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Players().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPlayersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playerOne := &Player{}
	playerTwo := &Player{}
	if err = randomize.Struct(seed, playerOne, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}
	if err = randomize.Struct(seed, playerTwo, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = playerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = playerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Players().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func playerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Player) error {
	*o = Player{}
	return nil
}

func playerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Player) error {
	*o = Player{}
	return nil
}

func playerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Player) error {
	*o = Player{}
	return nil
}

func playerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Player) error {
	*o = Player{}
	return nil
}

func playerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Player) error {
	*o = Player{}
	return nil
}

func playerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Player) error {
	*o = Player{}
	return nil
}

func playerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Player) error {
	*o = Player{}
	return nil
}

func playerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Player) error {
	*o = Player{}
	return nil
}

func playerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Player) error {
	*o = Player{}
	return nil
}

func testPlayersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Player{}
	o := &Player{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, playerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Player object: %s", err)
	}

	AddPlayerHook(boil.BeforeInsertHook, playerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	playerBeforeInsertHooks = []PlayerHook{}

	AddPlayerHook(boil.AfterInsertHook, playerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	playerAfterInsertHooks = []PlayerHook{}

	AddPlayerHook(boil.AfterSelectHook, playerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	playerAfterSelectHooks = []PlayerHook{}

	AddPlayerHook(boil.BeforeUpdateHook, playerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	playerBeforeUpdateHooks = []PlayerHook{}

	AddPlayerHook(boil.AfterUpdateHook, playerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	playerAfterUpdateHooks = []PlayerHook{}

	AddPlayerHook(boil.BeforeDeleteHook, playerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	playerBeforeDeleteHooks = []PlayerHook{}

	AddPlayerHook(boil.AfterDeleteHook, playerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	playerAfterDeleteHooks = []PlayerHook{}

	AddPlayerHook(boil.BeforeUpsertHook, playerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	playerBeforeUpsertHooks = []PlayerHook{}

	AddPlayerHook(boil.AfterUpsertHook, playerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	playerAfterUpsertHooks = []PlayerHook{}
}

func testPlayersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Players().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlayersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(playerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Players().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlayerToManyPlayerIDClubplayers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c Clubplayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, clubplayerDBTypes, false, clubplayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, clubplayerDBTypes, false, clubplayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PlayerID = a.PlayerID
	c.PlayerID = a.PlayerID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PlayerIDClubplayers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PlayerID == b.PlayerID {
			bFound = true
		}
		if v.PlayerID == c.PlayerID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlayerSlice{&a}
	if err = a.L.LoadPlayerIDClubplayers(ctx, tx, false, (*[]*Player)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlayerIDClubplayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PlayerIDClubplayers = nil
	if err = a.L.LoadPlayerIDClubplayers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlayerIDClubplayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPlayerToManyPlayerIDPlayerteams(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c Playerteam

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, playerteamDBTypes, false, playerteamColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, playerteamDBTypes, false, playerteamColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PlayerID = a.PlayerID
	c.PlayerID = a.PlayerID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PlayerIDPlayerteams().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PlayerID == b.PlayerID {
			bFound = true
		}
		if v.PlayerID == c.PlayerID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlayerSlice{&a}
	if err = a.L.LoadPlayerIDPlayerteams(ctx, tx, false, (*[]*Player)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlayerIDPlayerteams); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PlayerIDPlayerteams = nil
	if err = a.L.LoadPlayerIDPlayerteams(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlayerIDPlayerteams); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPlayerToManyAddOpPlayerIDClubplayers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c, d, e Clubplayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Clubplayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, clubplayerDBTypes, false, strmangle.SetComplement(clubplayerPrimaryKeyColumns, clubplayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Clubplayer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPlayerIDClubplayers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PlayerID != first.PlayerID {
			t.Error("foreign key was wrong value", a.PlayerID, first.PlayerID)
		}
		if a.PlayerID != second.PlayerID {
			t.Error("foreign key was wrong value", a.PlayerID, second.PlayerID)
		}

		if first.R.PlayerID != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PlayerID != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PlayerIDClubplayers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PlayerIDClubplayers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PlayerIDClubplayers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPlayerToManyAddOpPlayerIDPlayerteams(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c, d, e Playerteam

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Playerteam{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playerteamDBTypes, false, strmangle.SetComplement(playerteamPrimaryKeyColumns, playerteamColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Playerteam{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPlayerIDPlayerteams(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PlayerID != first.PlayerID {
			t.Error("foreign key was wrong value", a.PlayerID, first.PlayerID)
		}
		if a.PlayerID != second.PlayerID {
			t.Error("foreign key was wrong value", a.PlayerID, second.PlayerID)
		}

		if first.R.PlayerID != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PlayerID != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PlayerIDPlayerteams[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PlayerIDPlayerteams[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PlayerIDPlayerteams().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPlayersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPlayersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlayerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPlayersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Players().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	playerDBTypes = map[string]string{`PlayerID`: `int`, `FirstName`: `varchar`, `LastName`: `varchar`, `Sex`: `enum('M','F')`}
	_             = bytes.MinRead
)

func testPlayersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(playerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(playerAllColumns) == len(playerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Players().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, playerDBTypes, true, playerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPlayersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(playerAllColumns) == len(playerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Players().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, playerDBTypes, true, playerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(playerAllColumns, playerPrimaryKeyColumns) {
		fields = playerAllColumns
	} else {
		fields = strmangle.SetComplement(
			playerAllColumns,
			playerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PlayerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPlayersUpsert(t *testing.T) {
	t.Parallel()

	if len(playerAllColumns) == len(playerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLPlayerUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Player{}
	if err = randomize.Struct(seed, &o, playerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Player: %s", err)
	}

	count, err := Players().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, playerDBTypes, false, playerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Player: %s", err)
	}

	count, err = Players().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
