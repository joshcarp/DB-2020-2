// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Team is an object representing the database table.
type Team struct {
	TeamID   int    `boil:"TeamID" json:"TeamID" toml:"TeamID" yaml:"TeamID"`
	TeamName string `boil:"TeamName" json:"TeamName" toml:"TeamName" yaml:"TeamName"`
	TeamType string `boil:"TeamType" json:"TeamType" toml:"TeamType" yaml:"TeamType"`
	ClubID   int    `boil:"ClubID" json:"ClubID" toml:"ClubID" yaml:"ClubID"`

	R *teamR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L teamL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TeamColumns = struct {
	TeamID   string
	TeamName string
	TeamType string
	ClubID   string
}{
	TeamID:   "TeamID",
	TeamName: "TeamName",
	TeamType: "TeamType",
	ClubID:   "ClubID",
}

// Generated where

var TeamWhere = struct {
	TeamID   whereHelperint
	TeamName whereHelperstring
	TeamType whereHelperstring
	ClubID   whereHelperint
}{
	TeamID:   whereHelperint{field: "`team`.`TeamID`"},
	TeamName: whereHelperstring{field: "`team`.`TeamName`"},
	TeamType: whereHelperstring{field: "`team`.`TeamType`"},
	ClubID:   whereHelperint{field: "`team`.`ClubID`"},
}

// TeamRels is where relationship names are stored.
var TeamRels = struct {
	ClubID            string
	Team1Games        string
	Team2Games        string
	TeamIDPlayerteams string
}{
	ClubID:            "ClubID",
	Team1Games:        "Team1Games",
	Team2Games:        "Team2Games",
	TeamIDPlayerteams: "TeamIDPlayerteams",
}

// teamR is where relationships are stored.
type teamR struct {
	ClubID            *Club
	Team1Games        GameSlice
	Team2Games        GameSlice
	TeamIDPlayerteams PlayerteamSlice
}

// NewStruct creates a new relationship struct
func (*teamR) NewStruct() *teamR {
	return &teamR{}
}

// teamL is where Load methods for each relationship are stored.
type teamL struct{}

var (
	teamAllColumns            = []string{"TeamID", "TeamName", "TeamType", "ClubID"}
	teamColumnsWithoutDefault = []string{"TeamID", "TeamName", "TeamType", "ClubID"}
	teamColumnsWithDefault    = []string{}
	teamPrimaryKeyColumns     = []string{"TeamID"}
)

type (
	// TeamSlice is an alias for a slice of pointers to Team.
	// This should generally be used opposed to []Team.
	TeamSlice []*Team
	// TeamHook is the signature for custom Team hook methods
	TeamHook func(context.Context, boil.ContextExecutor, *Team) error

	teamQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	teamType                 = reflect.TypeOf(&Team{})
	teamMapping              = queries.MakeStructMapping(teamType)
	teamPrimaryKeyMapping, _ = queries.BindMapping(teamType, teamMapping, teamPrimaryKeyColumns)
	teamInsertCacheMut       sync.RWMutex
	teamInsertCache          = make(map[string]insertCache)
	teamUpdateCacheMut       sync.RWMutex
	teamUpdateCache          = make(map[string]updateCache)
	teamUpsertCacheMut       sync.RWMutex
	teamUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var teamBeforeInsertHooks []TeamHook
var teamBeforeUpdateHooks []TeamHook
var teamBeforeDeleteHooks []TeamHook
var teamBeforeUpsertHooks []TeamHook

var teamAfterInsertHooks []TeamHook
var teamAfterSelectHooks []TeamHook
var teamAfterUpdateHooks []TeamHook
var teamAfterDeleteHooks []TeamHook
var teamAfterUpsertHooks []TeamHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Team) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Team) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Team) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Team) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Team) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Team) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Team) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Team) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Team) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTeamHook registers your hook function for all future operations.
func AddTeamHook(hookPoint boil.HookPoint, teamHook TeamHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		teamBeforeInsertHooks = append(teamBeforeInsertHooks, teamHook)
	case boil.BeforeUpdateHook:
		teamBeforeUpdateHooks = append(teamBeforeUpdateHooks, teamHook)
	case boil.BeforeDeleteHook:
		teamBeforeDeleteHooks = append(teamBeforeDeleteHooks, teamHook)
	case boil.BeforeUpsertHook:
		teamBeforeUpsertHooks = append(teamBeforeUpsertHooks, teamHook)
	case boil.AfterInsertHook:
		teamAfterInsertHooks = append(teamAfterInsertHooks, teamHook)
	case boil.AfterSelectHook:
		teamAfterSelectHooks = append(teamAfterSelectHooks, teamHook)
	case boil.AfterUpdateHook:
		teamAfterUpdateHooks = append(teamAfterUpdateHooks, teamHook)
	case boil.AfterDeleteHook:
		teamAfterDeleteHooks = append(teamAfterDeleteHooks, teamHook)
	case boil.AfterUpsertHook:
		teamAfterUpsertHooks = append(teamAfterUpsertHooks, teamHook)
	}
}

// One returns a single team record from the query.
func (q teamQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Team, error) {
	o := &Team{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for team")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Team records from the query.
func (q teamQuery) All(ctx context.Context, exec boil.ContextExecutor) (TeamSlice, error) {
	var o []*Team

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Team slice")
	}

	if len(teamAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Team records in the query.
func (q teamQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count team rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q teamQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if team exists")
	}

	return count > 0, nil
}

//// ClubID pointed to by the foreign key.
//func (o *Team) ClubID(mods ...qm.QueryMod) clubQuery {
//	queryMods := []qm.QueryMod{
//		qm.Where("`ClubID` = ?", o.ClubID),
//	}
//
//	queryMods = append(queryMods, mods...)
//
//	query := Clubs(queryMods...)
//	queries.SetFrom(query.Query, "`club`")
//
//	return query
//}

// Team1Games retrieves all the game's Games with an executor via Team1 column.
func (o *Team) Team1Games(mods ...qm.QueryMod) gameQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`game`.`Team1`=?", o.TeamID),
	)

	query := Games(queryMods...)
	queries.SetFrom(query.Query, "`game`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`game`.*"})
	}

	return query
}

// Team2Games retrieves all the game's Games with an executor via Team2 column.
func (o *Team) Team2Games(mods ...qm.QueryMod) gameQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`game`.`Team2`=?", o.TeamID),
	)

	query := Games(queryMods...)
	queries.SetFrom(query.Query, "`game`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`game`.*"})
	}

	return query
}

// TeamIDPlayerteams retrieves all the playerteam's Playerteams with an executor via TeamID column.
func (o *Team) TeamIDPlayerteams(mods ...qm.QueryMod) playerteamQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`playerteam`.`TeamID`=?", o.TeamID),
	)

	query := Playerteams(queryMods...)
	queries.SetFrom(query.Query, "`playerteam`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`playerteam`.*"})
	}

	return query
}

// LoadClubID allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamL) LoadClubID(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		object = maybeTeam.(*Team)
	} else {
		slice = *maybeTeam.(*[]*Team)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args = append(args, object.ClubID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			for _, a := range args {
				if a == obj.ClubID {
					continue Outer
				}
			}

			args = append(args, obj.ClubID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`club`), qm.WhereIn(`club.ClubID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Club")
	}

	var resultSlice []*Club
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Club")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for club")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for club")
	}

	if len(teamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ClubID = foreign
		if foreign.R == nil {
			foreign.R = &clubR{}
		}
		foreign.R.ClubIDTeams = append(foreign.R.ClubIDTeams, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ClubID == foreign.ClubID {
				local.R.ClubID = foreign
				if foreign.R == nil {
					foreign.R = &clubR{}
				}
				foreign.R.ClubIDTeams = append(foreign.R.ClubIDTeams, local)
				break
			}
		}
	}

	return nil
}

// LoadTeam1Games allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadTeam1Games(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		object = maybeTeam.(*Team)
	} else {
		slice = *maybeTeam.(*[]*Team)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args = append(args, object.TeamID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			for _, a := range args {
				if a == obj.TeamID {
					continue Outer
				}
			}

			args = append(args, obj.TeamID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`game`), qm.WhereIn(`game.Team1 in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load game")
	}

	var resultSlice []*Game
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice game")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on game")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game")
	}

	if len(gameAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Team1Games = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gameR{}
			}
			foreign.R.Team1 = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TeamID == foreign.Team1 {
				local.R.Team1Games = append(local.R.Team1Games, foreign)
				if foreign.R == nil {
					foreign.R = &gameR{}
				}
				foreign.R.Team1 = local
				break
			}
		}
	}

	return nil
}

// LoadTeam2Games allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadTeam2Games(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		object = maybeTeam.(*Team)
	} else {
		slice = *maybeTeam.(*[]*Team)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args = append(args, object.TeamID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			for _, a := range args {
				if a == obj.TeamID {
					continue Outer
				}
			}

			args = append(args, obj.TeamID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`game`), qm.WhereIn(`game.Team2 in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load game")
	}

	var resultSlice []*Game
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice game")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on game")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game")
	}

	if len(gameAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Team2Games = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gameR{}
			}
			foreign.R.Team2 = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TeamID == foreign.Team2 {
				local.R.Team2Games = append(local.R.Team2Games, foreign)
				if foreign.R == nil {
					foreign.R = &gameR{}
				}
				foreign.R.Team2 = local
				break
			}
		}
	}

	return nil
}

// LoadTeamIDPlayerteams allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadTeamIDPlayerteams(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		object = maybeTeam.(*Team)
	} else {
		slice = *maybeTeam.(*[]*Team)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args = append(args, object.TeamID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			for _, a := range args {
				if a == obj.TeamID {
					continue Outer
				}
			}

			args = append(args, obj.TeamID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`playerteam`), qm.WhereIn(`playerteam.TeamID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load playerteam")
	}

	var resultSlice []*Playerteam
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice playerteam")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on playerteam")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for playerteam")
	}

	if len(playerteamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TeamIDPlayerteams = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerteamR{}
			}
			foreign.R.TeamID = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TeamID == foreign.TeamID {
				local.R.TeamIDPlayerteams = append(local.R.TeamIDPlayerteams, foreign)
				if foreign.R == nil {
					foreign.R = &playerteamR{}
				}
				foreign.R.TeamID = local
				break
			}
		}
	}

	return nil
}

// SetClubID of the team to the related item.
// Sets o.R.ClubID to related.
// Adds o to related.R.ClubIDTeams.
func (o *Team) SetClubID(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Club) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `team` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ClubID"}),
		strmangle.WhereClause("`", "`", 0, teamPrimaryKeyColumns),
	)
	values := []interface{}{related.ClubID, o.TeamID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ClubID = related.ClubID
	if o.R == nil {
		o.R = &teamR{
			ClubID: related,
		}
	} else {
		o.R.ClubID = related
	}

	if related.R == nil {
		related.R = &clubR{
			ClubIDTeams: TeamSlice{o},
		}
	} else {
		related.R.ClubIDTeams = append(related.R.ClubIDTeams, o)
	}

	return nil
}

// AddTeam1Games adds the given related objects to the existing relationships
// of the team, optionally inserting them as new records.
// Appends related to o.R.Team1Games.
// Sets related.R.Team1 appropriately.
func (o *Team) AddTeam1Games(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Game) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Team1 = o.TeamID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `game` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Team1"}),
				strmangle.WhereClause("`", "`", 0, gamePrimaryKeyColumns),
			)
			values := []interface{}{o.TeamID, rel.GameID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Team1 = o.TeamID
		}
	}

	if o.R == nil {
		o.R = &teamR{
			Team1Games: related,
		}
	} else {
		o.R.Team1Games = append(o.R.Team1Games, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gameR{
				Team1: o,
			}
		} else {
			rel.R.Team1 = o
		}
	}
	return nil
}

// AddTeam2Games adds the given related objects to the existing relationships
// of the team, optionally inserting them as new records.
// Appends related to o.R.Team2Games.
// Sets related.R.Team2 appropriately.
func (o *Team) AddTeam2Games(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Game) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Team2 = o.TeamID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `game` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Team2"}),
				strmangle.WhereClause("`", "`", 0, gamePrimaryKeyColumns),
			)
			values := []interface{}{o.TeamID, rel.GameID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Team2 = o.TeamID
		}
	}

	if o.R == nil {
		o.R = &teamR{
			Team2Games: related,
		}
	} else {
		o.R.Team2Games = append(o.R.Team2Games, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gameR{
				Team2: o,
			}
		} else {
			rel.R.Team2 = o
		}
	}
	return nil
}

// AddTeamIDPlayerteams adds the given related objects to the existing relationships
// of the team, optionally inserting them as new records.
// Appends related to o.R.TeamIDPlayerteams.
// Sets related.R.TeamID appropriately.
func (o *Team) AddTeamIDPlayerteams(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Playerteam) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TeamID = o.TeamID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `playerteam` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"TeamID"}),
				strmangle.WhereClause("`", "`", 0, playerteamPrimaryKeyColumns),
			)
			values := []interface{}{o.TeamID, rel.PlayerID, rel.TeamID, rel.GameID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TeamID = o.TeamID
		}
	}

	if o.R == nil {
		o.R = &teamR{
			TeamIDPlayerteams: related,
		}
	} else {
		o.R.TeamIDPlayerteams = append(o.R.TeamIDPlayerteams, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerteamR{
				TeamID: o,
			}
		} else {
			rel.R.TeamID = o
		}
	}
	return nil
}

// Teams retrieves all the records using an executor.
func Teams(mods ...qm.QueryMod) teamQuery {
	mods = append(mods, qm.From("`team`"))
	return teamQuery{NewQuery(mods...)}
}

// FindTeam retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTeam(ctx context.Context, exec boil.ContextExecutor, teamID int, selectCols ...string) (*Team, error) {
	teamObj := &Team{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `team` where `TeamID`=?", sel,
	)

	q := queries.Raw(query, teamID)

	err := q.Bind(ctx, exec, teamObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from team")
	}

	return teamObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Team) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no team provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teamColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	teamInsertCacheMut.RLock()
	cache, cached := teamInsertCache[key]
	teamInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			teamAllColumns,
			teamColumnsWithDefault,
			teamColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(teamType, teamMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(teamType, teamMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `team` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `team` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `team` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, teamPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into team")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TeamID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for team")
	}

CacheNoHooks:
	if !cached {
		teamInsertCacheMut.Lock()
		teamInsertCache[key] = cache
		teamInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Team.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Team) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	teamUpdateCacheMut.RLock()
	cache, cached := teamUpdateCache[key]
	teamUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			teamAllColumns,
			teamPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update team, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `team` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, teamPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(teamType, teamMapping, append(wl, teamPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update team row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for team")
	}

	if !cached {
		teamUpdateCacheMut.Lock()
		teamUpdateCache[key] = cache
		teamUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q teamQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for team")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for team")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TeamSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `team` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, teamPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in team slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all team")
	}
	return rowsAff, nil
}

var mySQLTeamUniqueColumns = []string{
	"TeamID",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Team) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no team provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teamColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTeamUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	teamUpsertCacheMut.RLock()
	cache, cached := teamUpsertCache[key]
	teamUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			teamAllColumns,
			teamColumnsWithDefault,
			teamColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			teamAllColumns,
			teamPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert team, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "team", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `team` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(teamType, teamMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(teamType, teamMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for team")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(teamType, teamMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for team")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for team")
	}

CacheNoHooks:
	if !cached {
		teamUpsertCacheMut.Lock()
		teamUpsertCache[key] = cache
		teamUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Team record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Team) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Team provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), teamPrimaryKeyMapping)
	sql := "DELETE FROM `team` WHERE `TeamID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from team")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for team")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q teamQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no teamQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from team")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for team")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TeamSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(teamBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `team` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, teamPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from team slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for team")
	}

	if len(teamAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Team) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTeam(ctx, exec, o.TeamID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TeamSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TeamSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `team`.* FROM `team` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, teamPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TeamSlice")
	}

	*o = slice

	return nil
}

// TeamExists checks if the Team row exists.
func TeamExists(ctx context.Context, exec boil.ContextExecutor, teamID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `team` where `TeamID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, teamID)
	}
	row := exec.QueryRowContext(ctx, sql, teamID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if team exists")
	}

	return exists, nil
}
