// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSeasons(t *testing.T) {
	t.Parallel()

	query := Seasons()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSeasonsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Seasons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSeasonsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Seasons().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Seasons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSeasonsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SeasonSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Seasons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSeasonsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SeasonExists(ctx, tx, o.SeasonID)
	if err != nil {
		t.Errorf("Unable to check if Season exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SeasonExists to return true, but got false.")
	}
}

func testSeasonsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	seasonFound, err := FindSeason(ctx, tx, o.SeasonID)
	if err != nil {
		t.Error(err)
	}

	if seasonFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSeasonsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Seasons().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSeasonsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Seasons().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSeasonsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	seasonOne := &Season{}
	seasonTwo := &Season{}
	if err = randomize.Struct(seed, seasonOne, seasonDBTypes, false, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}
	if err = randomize.Struct(seed, seasonTwo, seasonDBTypes, false, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = seasonOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = seasonTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Seasons().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSeasonsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	seasonOne := &Season{}
	seasonTwo := &Season{}
	if err = randomize.Struct(seed, seasonOne, seasonDBTypes, false, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}
	if err = randomize.Struct(seed, seasonTwo, seasonDBTypes, false, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = seasonOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = seasonTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Seasons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func seasonBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Season) error {
	*o = Season{}
	return nil
}

func seasonAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Season) error {
	*o = Season{}
	return nil
}

func seasonAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Season) error {
	*o = Season{}
	return nil
}

func seasonBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Season) error {
	*o = Season{}
	return nil
}

func seasonAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Season) error {
	*o = Season{}
	return nil
}

func seasonBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Season) error {
	*o = Season{}
	return nil
}

func seasonAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Season) error {
	*o = Season{}
	return nil
}

func seasonBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Season) error {
	*o = Season{}
	return nil
}

func seasonAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Season) error {
	*o = Season{}
	return nil
}

func testSeasonsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Season{}
	o := &Season{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, seasonDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Season object: %s", err)
	}

	AddSeasonHook(boil.BeforeInsertHook, seasonBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	seasonBeforeInsertHooks = []SeasonHook{}

	AddSeasonHook(boil.AfterInsertHook, seasonAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	seasonAfterInsertHooks = []SeasonHook{}

	AddSeasonHook(boil.AfterSelectHook, seasonAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	seasonAfterSelectHooks = []SeasonHook{}

	AddSeasonHook(boil.BeforeUpdateHook, seasonBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	seasonBeforeUpdateHooks = []SeasonHook{}

	AddSeasonHook(boil.AfterUpdateHook, seasonAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	seasonAfterUpdateHooks = []SeasonHook{}

	AddSeasonHook(boil.BeforeDeleteHook, seasonBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	seasonBeforeDeleteHooks = []SeasonHook{}

	AddSeasonHook(boil.AfterDeleteHook, seasonAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	seasonAfterDeleteHooks = []SeasonHook{}

	AddSeasonHook(boil.BeforeUpsertHook, seasonBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	seasonBeforeUpsertHooks = []SeasonHook{}

	AddSeasonHook(boil.AfterUpsertHook, seasonAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	seasonAfterUpsertHooks = []SeasonHook{}
}

func testSeasonsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Seasons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSeasonsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(seasonColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Seasons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSeasonToManySeasonIDGames(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Season
	var b, c Game

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, gameDBTypes, false, gameColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameDBTypes, false, gameColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SeasonID = a.SeasonID
	c.SeasonID = a.SeasonID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SeasonIDGames().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SeasonID == b.SeasonID {
			bFound = true
		}
		if v.SeasonID == c.SeasonID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SeasonSlice{&a}
	if err = a.L.LoadSeasonIDGames(ctx, tx, false, (*[]*Season)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SeasonIDGames); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SeasonIDGames = nil
	if err = a.L.LoadSeasonIDGames(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SeasonIDGames); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSeasonToManyAddOpSeasonIDGames(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Season
	var b, c, d, e Game

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seasonDBTypes, false, strmangle.SetComplement(seasonPrimaryKeyColumns, seasonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Game{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Game{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSeasonIDGames(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.SeasonID != first.SeasonID {
			t.Error("foreign key was wrong value", a.SeasonID, first.SeasonID)
		}
		if a.SeasonID != second.SeasonID {
			t.Error("foreign key was wrong value", a.SeasonID, second.SeasonID)
		}

		if first.R.SeasonID != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SeasonID != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SeasonIDGames[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SeasonIDGames[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SeasonIDGames().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSeasonToOneCompetitionUsingCompetitionID(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Season
	var foreign Competition

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, seasonDBTypes, false, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, competitionDBTypes, false, competitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competition struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CompetitionID = foreign.CompetitionID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CompetitionID().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.CompetitionID != foreign.CompetitionID {
		t.Errorf("want: %v, got %v", foreign.CompetitionID, check.CompetitionID)
	}

	slice := SeasonSlice{&local}
	if err = local.L.LoadCompetitionID(ctx, tx, false, (*[]*Season)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CompetitionID == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CompetitionID = nil
	if err = local.L.LoadCompetitionID(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CompetitionID == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSeasonToOneSetOpCompetitionUsingCompetitionID(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Season
	var b, c Competition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, seasonDBTypes, false, strmangle.SetComplement(seasonPrimaryKeyColumns, seasonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, competitionDBTypes, false, strmangle.SetComplement(competitionPrimaryKeyColumns, competitionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, competitionDBTypes, false, strmangle.SetComplement(competitionPrimaryKeyColumns, competitionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Competition{&b, &c} {
		err = a.SetCompetitionID(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CompetitionID != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CompetitionIDSeasons[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CompetitionID != x.CompetitionID {
			t.Error("foreign key was wrong value", a.CompetitionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CompetitionID))
		reflect.Indirect(reflect.ValueOf(&a.CompetitionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CompetitionID != x.CompetitionID {
			t.Error("foreign key was wrong value", a.CompetitionID, x.CompetitionID)
		}
	}
}

func testSeasonsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSeasonsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SeasonSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSeasonsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Seasons().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	seasonDBTypes = map[string]string{`SeasonID`: `int`, `SeasonYear`: `year`, `CompetitionID`: `int`}
	_             = bytes.MinRead
)

func testSeasonsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(seasonPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(seasonAllColumns) == len(seasonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Seasons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSeasonsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(seasonAllColumns) == len(seasonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Season{}
	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Seasons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, seasonDBTypes, true, seasonPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(seasonAllColumns, seasonPrimaryKeyColumns) {
		fields = seasonAllColumns
	} else {
		fields = strmangle.SetComplement(
			seasonAllColumns,
			seasonPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SeasonSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSeasonsUpsert(t *testing.T) {
	t.Parallel()

	if len(seasonAllColumns) == len(seasonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLSeasonUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Season{}
	if err = randomize.Struct(seed, &o, seasonDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Season: %s", err)
	}

	count, err := Seasons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, seasonDBTypes, false, seasonPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Season struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Season: %s", err)
	}

	count, err = Seasons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
