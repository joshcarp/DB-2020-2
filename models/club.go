// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Club is an object representing the database table.
type Club struct {
	ClubID   int         `boil:"ClubID" json:"ClubID" toml:"ClubID" yaml:"ClubID"`
	ClubName string      `boil:"ClubName" json:"ClubName" toml:"ClubName" yaml:"ClubName"`
	Address1 string      `boil:"Address1" json:"Address1" toml:"Address1" yaml:"Address1"`
	Address2 null.String `boil:"Address2" json:"Address2,omitempty" toml:"Address2" yaml:"Address2,omitempty"`
	Suburb   string      `boil:"Suburb" json:"Suburb" toml:"Suburb" yaml:"Suburb"`
	Postcode string      `boil:"Postcode" json:"Postcode" toml:"Postcode" yaml:"Postcode"`

	R *clubR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L clubL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClubColumns = struct {
	ClubID   string
	ClubName string
	Address1 string
	Address2 string
	Suburb   string
	Postcode string
}{
	ClubID:   "ClubID",
	ClubName: "ClubName",
	Address1: "Address1",
	Address2: "Address2",
	Suburb:   "Suburb",
	Postcode: "Postcode",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ClubWhere = struct {
	ClubID   whereHelperint
	ClubName whereHelperstring
	Address1 whereHelperstring
	Address2 whereHelpernull_String
	Suburb   whereHelperstring
	Postcode whereHelperstring
}{
	ClubID:   whereHelperint{field: "`club`.`ClubID`"},
	ClubName: whereHelperstring{field: "`club`.`ClubName`"},
	Address1: whereHelperstring{field: "`club`.`Address1`"},
	Address2: whereHelpernull_String{field: "`club`.`Address2`"},
	Suburb:   whereHelperstring{field: "`club`.`Suburb`"},
	Postcode: whereHelperstring{field: "`club`.`Postcode`"},
}

// ClubRels is where relationship names are stored.
var ClubRels = struct {
	ClubIDClubplayers string
	ClubIDTeams       string
}{
	ClubIDClubplayers: "ClubIDClubplayers",
	ClubIDTeams:       "ClubIDTeams",
}

// clubR is where relationships are stored.
type clubR struct {
	ClubIDClubplayers ClubplayerSlice
	ClubIDTeams       TeamSlice
}

// NewStruct creates a new relationship struct
func (*clubR) NewStruct() *clubR {
	return &clubR{}
}

// clubL is where Load methods for each relationship are stored.
type clubL struct{}

var (
	clubAllColumns            = []string{"ClubID", "ClubName", "Address1", "Address2", "Suburb", "Postcode"}
	clubColumnsWithoutDefault = []string{"ClubID", "ClubName", "Address1", "Address2", "Suburb", "Postcode"}
	clubColumnsWithDefault    = []string{}
	clubPrimaryKeyColumns     = []string{"ClubID"}
)

type (
	// ClubSlice is an alias for a slice of pointers to Club.
	// This should generally be used opposed to []Club.
	ClubSlice []*Club
	// ClubHook is the signature for custom Club hook methods
	ClubHook func(context.Context, boil.ContextExecutor, *Club) error

	clubQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	clubType                 = reflect.TypeOf(&Club{})
	clubMapping              = queries.MakeStructMapping(clubType)
	clubPrimaryKeyMapping, _ = queries.BindMapping(clubType, clubMapping, clubPrimaryKeyColumns)
	clubInsertCacheMut       sync.RWMutex
	clubInsertCache          = make(map[string]insertCache)
	clubUpdateCacheMut       sync.RWMutex
	clubUpdateCache          = make(map[string]updateCache)
	clubUpsertCacheMut       sync.RWMutex
	clubUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var clubBeforeInsertHooks []ClubHook
var clubBeforeUpdateHooks []ClubHook
var clubBeforeDeleteHooks []ClubHook
var clubBeforeUpsertHooks []ClubHook

var clubAfterInsertHooks []ClubHook
var clubAfterSelectHooks []ClubHook
var clubAfterUpdateHooks []ClubHook
var clubAfterDeleteHooks []ClubHook
var clubAfterUpsertHooks []ClubHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Club) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clubBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Club) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clubBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Club) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clubBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Club) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clubBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Club) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clubAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Club) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clubAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Club) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clubAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Club) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clubAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Club) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clubAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddClubHook registers your hook function for all future operations.
func AddClubHook(hookPoint boil.HookPoint, clubHook ClubHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		clubBeforeInsertHooks = append(clubBeforeInsertHooks, clubHook)
	case boil.BeforeUpdateHook:
		clubBeforeUpdateHooks = append(clubBeforeUpdateHooks, clubHook)
	case boil.BeforeDeleteHook:
		clubBeforeDeleteHooks = append(clubBeforeDeleteHooks, clubHook)
	case boil.BeforeUpsertHook:
		clubBeforeUpsertHooks = append(clubBeforeUpsertHooks, clubHook)
	case boil.AfterInsertHook:
		clubAfterInsertHooks = append(clubAfterInsertHooks, clubHook)
	case boil.AfterSelectHook:
		clubAfterSelectHooks = append(clubAfterSelectHooks, clubHook)
	case boil.AfterUpdateHook:
		clubAfterUpdateHooks = append(clubAfterUpdateHooks, clubHook)
	case boil.AfterDeleteHook:
		clubAfterDeleteHooks = append(clubAfterDeleteHooks, clubHook)
	case boil.AfterUpsertHook:
		clubAfterUpsertHooks = append(clubAfterUpsertHooks, clubHook)
	}
}

// One returns a single club record from the query.
func (q clubQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Club, error) {
	o := &Club{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for club")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Club records from the query.
func (q clubQuery) All(ctx context.Context, exec boil.ContextExecutor) (ClubSlice, error) {
	var o []*Club

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Club slice")
	}

	if len(clubAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Club records in the query.
func (q clubQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count club rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q clubQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if club exists")
	}

	return count > 0, nil
}

// ClubIDClubplayers retrieves all the clubplayer's Clubplayers with an executor via ClubID column.
func (o *Club) ClubIDClubplayers(mods ...qm.QueryMod) clubplayerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`clubplayer`.`ClubID`=?", o.ClubID),
	)

	query := Clubplayers(queryMods...)
	queries.SetFrom(query.Query, "`clubplayer`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`clubplayer`.*"})
	}

	return query
}

// ClubIDTeams retrieves all the team's Teams with an executor via ClubID column.
func (o *Club) ClubIDTeams(mods ...qm.QueryMod) teamQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`team`.`ClubID`=?", o.ClubID),
	)

	query := Teams(queryMods...)
	queries.SetFrom(query.Query, "`team`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`team`.*"})
	}

	return query
}

// LoadClubIDClubplayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (clubL) LoadClubIDClubplayers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeClub interface{}, mods queries.Applicator) error {
	var slice []*Club
	var object *Club

	if singular {
		object = maybeClub.(*Club)
	} else {
		slice = *maybeClub.(*[]*Club)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &clubR{}
		}
		args = append(args, object.ClubID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clubR{}
			}

			for _, a := range args {
				if a == obj.ClubID {
					continue Outer
				}
			}

			args = append(args, obj.ClubID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`clubplayer`), qm.WhereIn(`clubplayer.ClubID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load clubplayer")
	}

	var resultSlice []*Clubplayer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice clubplayer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on clubplayer")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for clubplayer")
	}

	if len(clubplayerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ClubIDClubplayers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &clubplayerR{}
			}
			foreign.R.ClubID = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ClubID == foreign.ClubID {
				local.R.ClubIDClubplayers = append(local.R.ClubIDClubplayers, foreign)
				if foreign.R == nil {
					foreign.R = &clubplayerR{}
				}
				foreign.R.ClubID = local
				break
			}
		}
	}

	return nil
}

// LoadClubIDTeams allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (clubL) LoadClubIDTeams(ctx context.Context, e boil.ContextExecutor, singular bool, maybeClub interface{}, mods queries.Applicator) error {
	var slice []*Club
	var object *Club

	if singular {
		object = maybeClub.(*Club)
	} else {
		slice = *maybeClub.(*[]*Club)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &clubR{}
		}
		args = append(args, object.ClubID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clubR{}
			}

			for _, a := range args {
				if a == obj.ClubID {
					continue Outer
				}
			}

			args = append(args, obj.ClubID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`team`), qm.WhereIn(`team.ClubID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on team")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for team")
	}

	if len(teamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ClubIDTeams = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &teamR{}
			}
			foreign.R.ClubID = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ClubID == foreign.ClubID {
				local.R.ClubIDTeams = append(local.R.ClubIDTeams, foreign)
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.ClubID = local
				break
			}
		}
	}

	return nil
}

// AddClubIDClubplayers adds the given related objects to the existing relationships
// of the club, optionally inserting them as new records.
// Appends related to o.R.ClubIDClubplayers.
// Sets related.R.ClubID appropriately.
func (o *Club) AddClubIDClubplayers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Clubplayer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ClubID = o.ClubID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `clubplayer` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ClubID"}),
				strmangle.WhereClause("`", "`", 0, clubplayerPrimaryKeyColumns),
			)
			values := []interface{}{o.ClubID, rel.ClubID, rel.PlayerID, rel.FromDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ClubID = o.ClubID
		}
	}

	if o.R == nil {
		o.R = &clubR{
			ClubIDClubplayers: related,
		}
	} else {
		o.R.ClubIDClubplayers = append(o.R.ClubIDClubplayers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &clubplayerR{
				ClubID: o,
			}
		} else {
			rel.R.ClubID = o
		}
	}
	return nil
}

// AddClubIDTeams adds the given related objects to the existing relationships
// of the club, optionally inserting them as new records.
// Appends related to o.R.ClubIDTeams.
// Sets related.R.ClubID appropriately.
func (o *Club) AddClubIDTeams(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Team) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ClubID = o.ClubID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `team` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ClubID"}),
				strmangle.WhereClause("`", "`", 0, teamPrimaryKeyColumns),
			)
			values := []interface{}{o.ClubID, rel.TeamID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ClubID = o.ClubID
		}
	}

	if o.R == nil {
		o.R = &clubR{
			ClubIDTeams: related,
		}
	} else {
		o.R.ClubIDTeams = append(o.R.ClubIDTeams, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &teamR{
				ClubID: o,
			}
		} else {
			rel.R.ClubID = o
		}
	}
	return nil
}

// Clubs retrieves all the records using an executor.
func Clubs(mods ...qm.QueryMod) clubQuery {
	mods = append(mods, qm.From("`club`"))
	return clubQuery{NewQuery(mods...)}
}

// FindClub retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClub(ctx context.Context, exec boil.ContextExecutor, clubID int, selectCols ...string) (*Club, error) {
	clubObj := &Club{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `club` where `ClubID`=?", sel,
	)

	q := queries.Raw(query, clubID)

	err := q.Bind(ctx, exec, clubObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from club")
	}

	return clubObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Club) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no club provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clubColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	clubInsertCacheMut.RLock()
	cache, cached := clubInsertCache[key]
	clubInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			clubAllColumns,
			clubColumnsWithDefault,
			clubColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(clubType, clubMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(clubType, clubMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `club` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `club` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `club` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, clubPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into club")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ClubID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for club")
	}

CacheNoHooks:
	if !cached {
		clubInsertCacheMut.Lock()
		clubInsertCache[key] = cache
		clubInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Club.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Club) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	clubUpdateCacheMut.RLock()
	cache, cached := clubUpdateCache[key]
	clubUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			clubAllColumns,
			clubPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update club, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `club` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, clubPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(clubType, clubMapping, append(wl, clubPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update club row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for club")
	}

	if !cached {
		clubUpdateCacheMut.Lock()
		clubUpdateCache[key] = cache
		clubUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q clubQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for club")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for club")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClubSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clubPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `club` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clubPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in club slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all club")
	}
	return rowsAff, nil
}

var mySQLClubUniqueColumns = []string{
	"ClubID",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Club) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no club provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clubColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLClubUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	clubUpsertCacheMut.RLock()
	cache, cached := clubUpsertCache[key]
	clubUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			clubAllColumns,
			clubColumnsWithDefault,
			clubColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			clubAllColumns,
			clubPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert club, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "club", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `club` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(clubType, clubMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(clubType, clubMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for club")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(clubType, clubMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for club")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for club")
	}

CacheNoHooks:
	if !cached {
		clubUpsertCacheMut.Lock()
		clubUpsertCache[key] = cache
		clubUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Club record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Club) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Club provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), clubPrimaryKeyMapping)
	sql := "DELETE FROM `club` WHERE `ClubID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from club")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for club")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q clubQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no clubQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from club")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for club")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClubSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(clubBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clubPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `club` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clubPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from club slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for club")
	}

	if len(clubAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Club) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindClub(ctx, exec, o.ClubID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClubSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClubSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clubPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `club`.* FROM `club` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clubPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ClubSlice")
	}

	*o = slice

	return nil
}

// ClubExists checks if the Club row exists.
func ClubExists(ctx context.Context, exec boil.ContextExecutor, clubID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `club` where `ClubID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, clubID)
	}
	row := exec.QueryRowContext(ctx, sql, clubID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if club exists")
	}

	return exists, nil
}
