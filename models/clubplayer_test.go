// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testClubplayers(t *testing.T) {
	t.Parallel()

	query := Clubplayers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testClubplayersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Clubplayer{}
	if err = randomize.Struct(seed, o, clubplayerDBTypes, true, clubplayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Clubplayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClubplayersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Clubplayer{}
	if err = randomize.Struct(seed, o, clubplayerDBTypes, true, clubplayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Clubplayers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Clubplayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClubplayersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Clubplayer{}
	if err = randomize.Struct(seed, o, clubplayerDBTypes, true, clubplayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ClubplayerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Clubplayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClubplayersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Clubplayer{}
	if err = randomize.Struct(seed, o, clubplayerDBTypes, true, clubplayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ClubplayerExists(ctx, tx, o.ClubID, o.PlayerID, o.FromDate)
	if err != nil {
		t.Errorf("Unable to check if Clubplayer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ClubplayerExists to return true, but got false.")
	}
}

func testClubplayersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Clubplayer{}
	if err = randomize.Struct(seed, o, clubplayerDBTypes, true, clubplayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	clubplayerFound, err := FindClubplayer(ctx, tx, o.ClubID, o.PlayerID, o.FromDate)
	if err != nil {
		t.Error(err)
	}

	if clubplayerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testClubplayersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Clubplayer{}
	if err = randomize.Struct(seed, o, clubplayerDBTypes, true, clubplayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Clubplayers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testClubplayersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Clubplayer{}
	if err = randomize.Struct(seed, o, clubplayerDBTypes, true, clubplayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Clubplayers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testClubplayersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	clubplayerOne := &Clubplayer{}
	clubplayerTwo := &Clubplayer{}
	if err = randomize.Struct(seed, clubplayerOne, clubplayerDBTypes, false, clubplayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}
	if err = randomize.Struct(seed, clubplayerTwo, clubplayerDBTypes, false, clubplayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = clubplayerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = clubplayerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Clubplayers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testClubplayersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	clubplayerOne := &Clubplayer{}
	clubplayerTwo := &Clubplayer{}
	if err = randomize.Struct(seed, clubplayerOne, clubplayerDBTypes, false, clubplayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}
	if err = randomize.Struct(seed, clubplayerTwo, clubplayerDBTypes, false, clubplayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = clubplayerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = clubplayerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Clubplayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func clubplayerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Clubplayer) error {
	*o = Clubplayer{}
	return nil
}

func clubplayerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Clubplayer) error {
	*o = Clubplayer{}
	return nil
}

func clubplayerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Clubplayer) error {
	*o = Clubplayer{}
	return nil
}

func clubplayerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Clubplayer) error {
	*o = Clubplayer{}
	return nil
}

func clubplayerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Clubplayer) error {
	*o = Clubplayer{}
	return nil
}

func clubplayerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Clubplayer) error {
	*o = Clubplayer{}
	return nil
}

func clubplayerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Clubplayer) error {
	*o = Clubplayer{}
	return nil
}

func clubplayerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Clubplayer) error {
	*o = Clubplayer{}
	return nil
}

func clubplayerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Clubplayer) error {
	*o = Clubplayer{}
	return nil
}

func testClubplayersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Clubplayer{}
	o := &Clubplayer{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, clubplayerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Clubplayer object: %s", err)
	}

	AddClubplayerHook(boil.BeforeInsertHook, clubplayerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	clubplayerBeforeInsertHooks = []ClubplayerHook{}

	AddClubplayerHook(boil.AfterInsertHook, clubplayerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	clubplayerAfterInsertHooks = []ClubplayerHook{}

	AddClubplayerHook(boil.AfterSelectHook, clubplayerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	clubplayerAfterSelectHooks = []ClubplayerHook{}

	AddClubplayerHook(boil.BeforeUpdateHook, clubplayerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	clubplayerBeforeUpdateHooks = []ClubplayerHook{}

	AddClubplayerHook(boil.AfterUpdateHook, clubplayerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	clubplayerAfterUpdateHooks = []ClubplayerHook{}

	AddClubplayerHook(boil.BeforeDeleteHook, clubplayerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	clubplayerBeforeDeleteHooks = []ClubplayerHook{}

	AddClubplayerHook(boil.AfterDeleteHook, clubplayerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	clubplayerAfterDeleteHooks = []ClubplayerHook{}

	AddClubplayerHook(boil.BeforeUpsertHook, clubplayerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	clubplayerBeforeUpsertHooks = []ClubplayerHook{}

	AddClubplayerHook(boil.AfterUpsertHook, clubplayerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	clubplayerAfterUpsertHooks = []ClubplayerHook{}
}

func testClubplayersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Clubplayer{}
	if err = randomize.Struct(seed, o, clubplayerDBTypes, true, clubplayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Clubplayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testClubplayersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Clubplayer{}
	if err = randomize.Struct(seed, o, clubplayerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(clubplayerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Clubplayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testClubplayerToOneClubUsingClubID(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Clubplayer
	var foreign Club

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, clubplayerDBTypes, false, clubplayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, clubDBTypes, false, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ClubID = foreign.ClubID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ClubID().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ClubID != foreign.ClubID {
		t.Errorf("want: %v, got %v", foreign.ClubID, check.ClubID)
	}

	slice := ClubplayerSlice{&local}
	if err = local.L.LoadClubID(ctx, tx, false, (*[]*Clubplayer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ClubID == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ClubID = nil
	if err = local.L.LoadClubID(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ClubID == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testClubplayerToOnePlayerUsingPlayerID(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Clubplayer
	var foreign Player

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, clubplayerDBTypes, false, clubplayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PlayerID = foreign.PlayerID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.PlayerID().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PlayerID != foreign.PlayerID {
		t.Errorf("want: %v, got %v", foreign.PlayerID, check.PlayerID)
	}

	slice := ClubplayerSlice{&local}
	if err = local.L.LoadPlayerID(ctx, tx, false, (*[]*Clubplayer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PlayerID == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.PlayerID = nil
	if err = local.L.LoadPlayerID(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PlayerID == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testClubplayerToOneSetOpClubUsingClubID(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Clubplayer
	var b, c Club

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clubplayerDBTypes, false, strmangle.SetComplement(clubplayerPrimaryKeyColumns, clubplayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, clubDBTypes, false, strmangle.SetComplement(clubPrimaryKeyColumns, clubColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, clubDBTypes, false, strmangle.SetComplement(clubPrimaryKeyColumns, clubColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Club{&b, &c} {
		err = a.SetClubID(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ClubID != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ClubIDClubplayers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ClubID != x.ClubID {
			t.Error("foreign key was wrong value", a.ClubID)
		}

		if exists, err := ClubplayerExists(ctx, tx, a.ClubID, a.PlayerID, a.FromDate); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testClubplayerToOneSetOpPlayerUsingPlayerID(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Clubplayer
	var b, c Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clubplayerDBTypes, false, strmangle.SetComplement(clubplayerPrimaryKeyColumns, clubplayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Player{&b, &c} {
		err = a.SetPlayerID(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.PlayerID != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PlayerIDClubplayers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PlayerID != x.PlayerID {
			t.Error("foreign key was wrong value", a.PlayerID)
		}

		if exists, err := ClubplayerExists(ctx, tx, a.ClubID, a.PlayerID, a.FromDate); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testClubplayersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Clubplayer{}
	if err = randomize.Struct(seed, o, clubplayerDBTypes, true, clubplayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testClubplayersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Clubplayer{}
	if err = randomize.Struct(seed, o, clubplayerDBTypes, true, clubplayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ClubplayerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testClubplayersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Clubplayer{}
	if err = randomize.Struct(seed, o, clubplayerDBTypes, true, clubplayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Clubplayers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	clubplayerDBTypes = map[string]string{`ClubID`: `int`, `PlayerID`: `int`, `FromDate`: `date`, `ToDate`: `date`}
	_                 = bytes.MinRead
)

func testClubplayersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(clubplayerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(clubplayerAllColumns) == len(clubplayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Clubplayer{}
	if err = randomize.Struct(seed, o, clubplayerDBTypes, true, clubplayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Clubplayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, clubplayerDBTypes, true, clubplayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testClubplayersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(clubplayerAllColumns) == len(clubplayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Clubplayer{}
	if err = randomize.Struct(seed, o, clubplayerDBTypes, true, clubplayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Clubplayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, clubplayerDBTypes, true, clubplayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(clubplayerAllColumns, clubplayerPrimaryKeyColumns) {
		fields = clubplayerAllColumns
	} else {
		fields = strmangle.SetComplement(
			clubplayerAllColumns,
			clubplayerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ClubplayerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testClubplayersUpsert(t *testing.T) {
	t.Parallel()

	if len(clubplayerAllColumns) == len(clubplayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLClubplayerUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Clubplayer{}
	if err = randomize.Struct(seed, &o, clubplayerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Clubplayer: %s", err)
	}

	count, err := Clubplayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, clubplayerDBTypes, false, clubplayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Clubplayer struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Clubplayer: %s", err)
	}

	count, err = Clubplayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
