// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Competition is an object representing the database table.
type Competition struct {
	CompetitionID   int    `boil:"CompetitionID" json:"CompetitionID" toml:"CompetitionID" yaml:"CompetitionID"`
	CompetitionName string `boil:"CompetitionName" json:"CompetitionName" toml:"CompetitionName" yaml:"CompetitionName"`
	CompetitionType string `boil:"CompetitionType" json:"CompetitionType" toml:"CompetitionType" yaml:"CompetitionType"`

	R *competitionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L competitionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CompetitionColumns = struct {
	CompetitionID   string
	CompetitionName string
	CompetitionType string
}{
	CompetitionID:   "CompetitionID",
	CompetitionName: "CompetitionName",
	CompetitionType: "CompetitionType",
}

// Generated where

var CompetitionWhere = struct {
	CompetitionID   whereHelperint
	CompetitionName whereHelperstring
	CompetitionType whereHelperstring
}{
	CompetitionID:   whereHelperint{field: "`competition`.`CompetitionID`"},
	CompetitionName: whereHelperstring{field: "`competition`.`CompetitionName`"},
	CompetitionType: whereHelperstring{field: "`competition`.`CompetitionType`"},
}

// CompetitionRels is where relationship names are stored.
var CompetitionRels = struct {
	CompetitionIDSeasons string
}{
	CompetitionIDSeasons: "CompetitionIDSeasons",
}

// competitionR is where relationships are stored.
type competitionR struct {
	CompetitionIDSeasons SeasonSlice
}

// NewStruct creates a new relationship struct
func (*competitionR) NewStruct() *competitionR {
	return &competitionR{}
}

// competitionL is where Load methods for each relationship are stored.
type competitionL struct{}

var (
	competitionAllColumns            = []string{"CompetitionID", "CompetitionName", "CompetitionType"}
	competitionColumnsWithoutDefault = []string{"CompetitionID", "CompetitionName", "CompetitionType"}
	competitionColumnsWithDefault    = []string{}
	competitionPrimaryKeyColumns     = []string{"CompetitionID"}
)

type (
	// CompetitionSlice is an alias for a slice of pointers to Competition.
	// This should generally be used opposed to []Competition.
	CompetitionSlice []*Competition
	// CompetitionHook is the signature for custom Competition hook methods
	CompetitionHook func(context.Context, boil.ContextExecutor, *Competition) error

	competitionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	competitionType                 = reflect.TypeOf(&Competition{})
	competitionMapping              = queries.MakeStructMapping(competitionType)
	competitionPrimaryKeyMapping, _ = queries.BindMapping(competitionType, competitionMapping, competitionPrimaryKeyColumns)
	competitionInsertCacheMut       sync.RWMutex
	competitionInsertCache          = make(map[string]insertCache)
	competitionUpdateCacheMut       sync.RWMutex
	competitionUpdateCache          = make(map[string]updateCache)
	competitionUpsertCacheMut       sync.RWMutex
	competitionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var competitionBeforeInsertHooks []CompetitionHook
var competitionBeforeUpdateHooks []CompetitionHook
var competitionBeforeDeleteHooks []CompetitionHook
var competitionBeforeUpsertHooks []CompetitionHook

var competitionAfterInsertHooks []CompetitionHook
var competitionAfterSelectHooks []CompetitionHook
var competitionAfterUpdateHooks []CompetitionHook
var competitionAfterDeleteHooks []CompetitionHook
var competitionAfterUpsertHooks []CompetitionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Competition) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Competition) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Competition) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Competition) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Competition) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Competition) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Competition) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Competition) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Competition) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range competitionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCompetitionHook registers your hook function for all future operations.
func AddCompetitionHook(hookPoint boil.HookPoint, competitionHook CompetitionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		competitionBeforeInsertHooks = append(competitionBeforeInsertHooks, competitionHook)
	case boil.BeforeUpdateHook:
		competitionBeforeUpdateHooks = append(competitionBeforeUpdateHooks, competitionHook)
	case boil.BeforeDeleteHook:
		competitionBeforeDeleteHooks = append(competitionBeforeDeleteHooks, competitionHook)
	case boil.BeforeUpsertHook:
		competitionBeforeUpsertHooks = append(competitionBeforeUpsertHooks, competitionHook)
	case boil.AfterInsertHook:
		competitionAfterInsertHooks = append(competitionAfterInsertHooks, competitionHook)
	case boil.AfterSelectHook:
		competitionAfterSelectHooks = append(competitionAfterSelectHooks, competitionHook)
	case boil.AfterUpdateHook:
		competitionAfterUpdateHooks = append(competitionAfterUpdateHooks, competitionHook)
	case boil.AfterDeleteHook:
		competitionAfterDeleteHooks = append(competitionAfterDeleteHooks, competitionHook)
	case boil.AfterUpsertHook:
		competitionAfterUpsertHooks = append(competitionAfterUpsertHooks, competitionHook)
	}
}

// One returns a single competition record from the query.
func (q competitionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Competition, error) {
	o := &Competition{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for competition")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Competition records from the query.
func (q competitionQuery) All(ctx context.Context, exec boil.ContextExecutor) (CompetitionSlice, error) {
	var o []*Competition

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Competition slice")
	}

	if len(competitionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Competition records in the query.
func (q competitionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count competition rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q competitionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if competition exists")
	}

	return count > 0, nil
}

// CompetitionIDSeasons retrieves all the season's Seasons with an executor via CompetitionID column.
func (o *Competition) CompetitionIDSeasons(mods ...qm.QueryMod) seasonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`season`.`CompetitionID`=?", o.CompetitionID),
	)

	query := Seasons(queryMods...)
	queries.SetFrom(query.Query, "`season`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`season`.*"})
	}

	return query
}

// LoadCompetitionIDSeasons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (competitionL) LoadCompetitionIDSeasons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompetition interface{}, mods queries.Applicator) error {
	var slice []*Competition
	var object *Competition

	if singular {
		object = maybeCompetition.(*Competition)
	} else {
		slice = *maybeCompetition.(*[]*Competition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &competitionR{}
		}
		args = append(args, object.CompetitionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &competitionR{}
			}

			for _, a := range args {
				if a == obj.CompetitionID {
					continue Outer
				}
			}

			args = append(args, obj.CompetitionID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`season`), qm.WhereIn(`season.CompetitionID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load season")
	}

	var resultSlice []*Season
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice season")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on season")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for season")
	}

	if len(seasonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CompetitionIDSeasons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &seasonR{}
			}
			foreign.R.CompetitionID = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CompetitionID == foreign.CompetitionID {
				local.R.CompetitionIDSeasons = append(local.R.CompetitionIDSeasons, foreign)
				if foreign.R == nil {
					foreign.R = &seasonR{}
				}
				foreign.R.CompetitionID = local
				break
			}
		}
	}

	return nil
}

// AddCompetitionIDSeasons adds the given related objects to the existing relationships
// of the competition, optionally inserting them as new records.
// Appends related to o.R.CompetitionIDSeasons.
// Sets related.R.CompetitionID appropriately.
func (o *Competition) AddCompetitionIDSeasons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Season) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CompetitionID = o.CompetitionID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `season` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"CompetitionID"}),
				strmangle.WhereClause("`", "`", 0, seasonPrimaryKeyColumns),
			)
			values := []interface{}{o.CompetitionID, rel.SeasonID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CompetitionID = o.CompetitionID
		}
	}

	if o.R == nil {
		o.R = &competitionR{
			CompetitionIDSeasons: related,
		}
	} else {
		o.R.CompetitionIDSeasons = append(o.R.CompetitionIDSeasons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &seasonR{
				CompetitionID: o,
			}
		} else {
			rel.R.CompetitionID = o
		}
	}
	return nil
}

// Competitions retrieves all the records using an executor.
func Competitions(mods ...qm.QueryMod) competitionQuery {
	mods = append(mods, qm.From("`competition`"))
	return competitionQuery{NewQuery(mods...)}
}

// FindCompetition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCompetition(ctx context.Context, exec boil.ContextExecutor, competitionID int, selectCols ...string) (*Competition, error) {
	competitionObj := &Competition{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `competition` where `CompetitionID`=?", sel,
	)

	q := queries.Raw(query, competitionID)

	err := q.Bind(ctx, exec, competitionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from competition")
	}

	return competitionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Competition) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no competition provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(competitionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	competitionInsertCacheMut.RLock()
	cache, cached := competitionInsertCache[key]
	competitionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			competitionAllColumns,
			competitionColumnsWithDefault,
			competitionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(competitionType, competitionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(competitionType, competitionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `competition` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `competition` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `competition` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, competitionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into competition")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CompetitionID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for competition")
	}

CacheNoHooks:
	if !cached {
		competitionInsertCacheMut.Lock()
		competitionInsertCache[key] = cache
		competitionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Competition.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Competition) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	competitionUpdateCacheMut.RLock()
	cache, cached := competitionUpdateCache[key]
	competitionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			competitionAllColumns,
			competitionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update competition, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `competition` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, competitionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(competitionType, competitionMapping, append(wl, competitionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update competition row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for competition")
	}

	if !cached {
		competitionUpdateCacheMut.Lock()
		competitionUpdateCache[key] = cache
		competitionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q competitionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for competition")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for competition")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CompetitionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), competitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `competition` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, competitionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in competition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all competition")
	}
	return rowsAff, nil
}

var mySQLCompetitionUniqueColumns = []string{
	"CompetitionID",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Competition) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no competition provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(competitionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCompetitionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	competitionUpsertCacheMut.RLock()
	cache, cached := competitionUpsertCache[key]
	competitionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			competitionAllColumns,
			competitionColumnsWithDefault,
			competitionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			competitionAllColumns,
			competitionPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert competition, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "competition", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `competition` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(competitionType, competitionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(competitionType, competitionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for competition")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(competitionType, competitionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for competition")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for competition")
	}

CacheNoHooks:
	if !cached {
		competitionUpsertCacheMut.Lock()
		competitionUpsertCache[key] = cache
		competitionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Competition record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Competition) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Competition provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), competitionPrimaryKeyMapping)
	sql := "DELETE FROM `competition` WHERE `CompetitionID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from competition")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for competition")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q competitionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no competitionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from competition")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for competition")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CompetitionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(competitionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), competitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `competition` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, competitionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from competition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for competition")
	}

	if len(competitionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Competition) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCompetition(ctx, exec, o.CompetitionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CompetitionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CompetitionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), competitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `competition`.* FROM `competition` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, competitionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CompetitionSlice")
	}

	*o = slice

	return nil
}

// CompetitionExists checks if the Competition row exists.
func CompetitionExists(ctx context.Context, exec boil.ContextExecutor, competitionID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `competition` where `CompetitionID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, competitionID)
	}
	row := exec.QueryRowContext(ctx, sql, competitionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if competition exists")
	}

	return exists, nil
}
