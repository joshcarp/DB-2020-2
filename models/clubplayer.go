// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Clubplayer is an object representing the database table.
type Clubplayer struct {
	ClubID   int       `boil:"ClubID" json:"ClubID" toml:"ClubID" yaml:"ClubID"`
	PlayerID int       `boil:"PlayerID" json:"PlayerID" toml:"PlayerID" yaml:"PlayerID"`
	FromDate time.Time `boil:"FromDate" json:"FromDate" toml:"FromDate" yaml:"FromDate"`
	ToDate   null.Time `boil:"ToDate" json:"ToDate,omitempty" toml:"ToDate" yaml:"ToDate,omitempty"`

	R *clubplayerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L clubplayerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClubplayerColumns = struct {
	ClubID   string
	PlayerID string
	FromDate string
	ToDate   string
}{
	ClubID:   "ClubID",
	PlayerID: "PlayerID",
	FromDate: "FromDate",
	ToDate:   "ToDate",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ClubplayerWhere = struct {
	ClubID   whereHelperint
	PlayerID whereHelperint
	FromDate whereHelpertime_Time
	ToDate   whereHelpernull_Time
}{
	ClubID:   whereHelperint{field: "`clubplayer`.`ClubID`"},
	PlayerID: whereHelperint{field: "`clubplayer`.`PlayerID`"},
	FromDate: whereHelpertime_Time{field: "`clubplayer`.`FromDate`"},
	ToDate:   whereHelpernull_Time{field: "`clubplayer`.`ToDate`"},
}

// ClubplayerRels is where relationship names are stored.
var ClubplayerRels = struct {
	ClubID   string
	PlayerID string
}{
	ClubID:   "ClubID",
	PlayerID: "PlayerID",
}

// clubplayerR is where relationships are stored.
type clubplayerR struct {
	ClubID   *Club
	PlayerID *Player
}

// NewStruct creates a new relationship struct
func (*clubplayerR) NewStruct() *clubplayerR {
	return &clubplayerR{}
}

// clubplayerL is where Load methods for each relationship are stored.
type clubplayerL struct{}

var (
	clubplayerAllColumns            = []string{"ClubID", "PlayerID", "FromDate", "ToDate"}
	clubplayerColumnsWithoutDefault = []string{"ClubID", "PlayerID", "FromDate", "ToDate"}
	clubplayerColumnsWithDefault    = []string{}
	clubplayerPrimaryKeyColumns     = []string{"ClubID", "PlayerID", "FromDate"}
)

type (
	// ClubplayerSlice is an alias for a slice of pointers to Clubplayer.
	// This should generally be used opposed to []Clubplayer.
	ClubplayerSlice []*Clubplayer
	// ClubplayerHook is the signature for custom Clubplayer hook methods
	ClubplayerHook func(context.Context, boil.ContextExecutor, *Clubplayer) error

	clubplayerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	clubplayerType                 = reflect.TypeOf(&Clubplayer{})
	clubplayerMapping              = queries.MakeStructMapping(clubplayerType)
	clubplayerPrimaryKeyMapping, _ = queries.BindMapping(clubplayerType, clubplayerMapping, clubplayerPrimaryKeyColumns)
	clubplayerInsertCacheMut       sync.RWMutex
	clubplayerInsertCache          = make(map[string]insertCache)
	clubplayerUpdateCacheMut       sync.RWMutex
	clubplayerUpdateCache          = make(map[string]updateCache)
	clubplayerUpsertCacheMut       sync.RWMutex
	clubplayerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var clubplayerBeforeInsertHooks []ClubplayerHook
var clubplayerBeforeUpdateHooks []ClubplayerHook
var clubplayerBeforeDeleteHooks []ClubplayerHook
var clubplayerBeforeUpsertHooks []ClubplayerHook

var clubplayerAfterInsertHooks []ClubplayerHook
var clubplayerAfterSelectHooks []ClubplayerHook
var clubplayerAfterUpdateHooks []ClubplayerHook
var clubplayerAfterDeleteHooks []ClubplayerHook
var clubplayerAfterUpsertHooks []ClubplayerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Clubplayer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clubplayerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Clubplayer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clubplayerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Clubplayer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clubplayerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Clubplayer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clubplayerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Clubplayer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clubplayerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Clubplayer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clubplayerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Clubplayer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clubplayerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Clubplayer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clubplayerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Clubplayer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clubplayerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddClubplayerHook registers your hook function for all future operations.
func AddClubplayerHook(hookPoint boil.HookPoint, clubplayerHook ClubplayerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		clubplayerBeforeInsertHooks = append(clubplayerBeforeInsertHooks, clubplayerHook)
	case boil.BeforeUpdateHook:
		clubplayerBeforeUpdateHooks = append(clubplayerBeforeUpdateHooks, clubplayerHook)
	case boil.BeforeDeleteHook:
		clubplayerBeforeDeleteHooks = append(clubplayerBeforeDeleteHooks, clubplayerHook)
	case boil.BeforeUpsertHook:
		clubplayerBeforeUpsertHooks = append(clubplayerBeforeUpsertHooks, clubplayerHook)
	case boil.AfterInsertHook:
		clubplayerAfterInsertHooks = append(clubplayerAfterInsertHooks, clubplayerHook)
	case boil.AfterSelectHook:
		clubplayerAfterSelectHooks = append(clubplayerAfterSelectHooks, clubplayerHook)
	case boil.AfterUpdateHook:
		clubplayerAfterUpdateHooks = append(clubplayerAfterUpdateHooks, clubplayerHook)
	case boil.AfterDeleteHook:
		clubplayerAfterDeleteHooks = append(clubplayerAfterDeleteHooks, clubplayerHook)
	case boil.AfterUpsertHook:
		clubplayerAfterUpsertHooks = append(clubplayerAfterUpsertHooks, clubplayerHook)
	}
}

// One returns a single clubplayer record from the query.
func (q clubplayerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Clubplayer, error) {
	o := &Clubplayer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for clubplayer")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Clubplayer records from the query.
func (q clubplayerQuery) All(ctx context.Context, exec boil.ContextExecutor) (ClubplayerSlice, error) {
	var o []*Clubplayer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Clubplayer slice")
	}

	if len(clubplayerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Clubplayer records in the query.
func (q clubplayerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count clubplayer rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q clubplayerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if clubplayer exists")
	}

	return count > 0, nil
}

//// ClubID pointed to by the foreign key.
//func (o *Clubplayer) ClubID(mods ...qm.QueryMod) clubQuery {
//	queryMods := []qm.QueryMod{
//		qm.Where("`ClubID` = ?", o.ClubID),
//	}
//
//	queryMods = append(queryMods, mods...)
//
//	query := Clubs(queryMods...)
//	queries.SetFrom(query.Query, "`club`")
//
//	return query
//}
//
//// PlayerID pointed to by the foreign key.
//func (o *Clubplayer) PlayerID(mods ...qm.QueryMod) playerQuery {
//	queryMods := []qm.QueryMod{
//		qm.Where("`PlayerID` = ?", o.PlayerID),
//	}
//
//	queryMods = append(queryMods, mods...)
//
//	query := Players(queryMods...)
//	queries.SetFrom(query.Query, "`player`")
//
//	return query
//}

// LoadClubID allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (clubplayerL) LoadClubID(ctx context.Context, e boil.ContextExecutor, singular bool, maybeClubplayer interface{}, mods queries.Applicator) error {
	var slice []*Clubplayer
	var object *Clubplayer

	if singular {
		object = maybeClubplayer.(*Clubplayer)
	} else {
		slice = *maybeClubplayer.(*[]*Clubplayer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &clubplayerR{}
		}
		args = append(args, object.ClubID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clubplayerR{}
			}

			for _, a := range args {
				if a == obj.ClubID {
					continue Outer
				}
			}

			args = append(args, obj.ClubID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`club`), qm.WhereIn(`club.ClubID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Club")
	}

	var resultSlice []*Club
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Club")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for club")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for club")
	}

	if len(clubplayerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ClubID = foreign
		if foreign.R == nil {
			foreign.R = &clubR{}
		}
		foreign.R.ClubIDClubplayers = append(foreign.R.ClubIDClubplayers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ClubID == foreign.ClubID {
				local.R.ClubID = foreign
				if foreign.R == nil {
					foreign.R = &clubR{}
				}
				foreign.R.ClubIDClubplayers = append(foreign.R.ClubIDClubplayers, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayerID allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (clubplayerL) LoadPlayerID(ctx context.Context, e boil.ContextExecutor, singular bool, maybeClubplayer interface{}, mods queries.Applicator) error {
	var slice []*Clubplayer
	var object *Clubplayer

	if singular {
		object = maybeClubplayer.(*Clubplayer)
	} else {
		slice = *maybeClubplayer.(*[]*Clubplayer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &clubplayerR{}
		}
		args = append(args, object.PlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clubplayerR{}
			}

			for _, a := range args {
				if a == obj.PlayerID {
					continue Outer
				}
			}

			args = append(args, obj.PlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`player`), qm.WhereIn(`player.PlayerID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for player")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player")
	}

	if len(clubplayerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlayerID = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.PlayerIDClubplayers = append(foreign.R.PlayerIDClubplayers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.PlayerID {
				local.R.PlayerID = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.PlayerIDClubplayers = append(foreign.R.PlayerIDClubplayers, local)
				break
			}
		}
	}

	return nil
}

// SetClubID of the clubplayer to the related item.
// Sets o.R.ClubID to related.
// Adds o to related.R.ClubIDClubplayers.
func (o *Clubplayer) SetClubID(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Club) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `clubplayer` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ClubID"}),
		strmangle.WhereClause("`", "`", 0, clubplayerPrimaryKeyColumns),
	)
	values := []interface{}{related.ClubID, o.ClubID, o.PlayerID, o.FromDate}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ClubID = related.ClubID
	if o.R == nil {
		o.R = &clubplayerR{
			ClubID: related,
		}
	} else {
		o.R.ClubID = related
	}

	if related.R == nil {
		related.R = &clubR{
			ClubIDClubplayers: ClubplayerSlice{o},
		}
	} else {
		related.R.ClubIDClubplayers = append(related.R.ClubIDClubplayers, o)
	}

	return nil
}

// SetPlayerID of the clubplayer to the related item.
// Sets o.R.PlayerID to related.
// Adds o to related.R.PlayerIDClubplayers.
func (o *Clubplayer) SetPlayerID(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `clubplayer` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PlayerID"}),
		strmangle.WhereClause("`", "`", 0, clubplayerPrimaryKeyColumns),
	)
	values := []interface{}{related.PlayerID, o.ClubID, o.PlayerID, o.FromDate}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.PlayerID
	if o.R == nil {
		o.R = &clubplayerR{
			PlayerID: related,
		}
	} else {
		o.R.PlayerID = related
	}

	if related.R == nil {
		related.R = &playerR{
			PlayerIDClubplayers: ClubplayerSlice{o},
		}
	} else {
		related.R.PlayerIDClubplayers = append(related.R.PlayerIDClubplayers, o)
	}

	return nil
}

// Clubplayers retrieves all the records using an executor.
func Clubplayers(mods ...qm.QueryMod) clubplayerQuery {
	mods = append(mods, qm.From("`clubplayer`"))
	return clubplayerQuery{NewQuery(mods...)}
}

// FindClubplayer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClubplayer(ctx context.Context, exec boil.ContextExecutor, clubID int, playerID int, fromDate time.Time, selectCols ...string) (*Clubplayer, error) {
	clubplayerObj := &Clubplayer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `clubplayer` where `ClubID`=? AND `PlayerID`=? AND `FromDate`=?", sel,
	)

	q := queries.Raw(query, clubID, playerID, fromDate)

	err := q.Bind(ctx, exec, clubplayerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from clubplayer")
	}

	return clubplayerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Clubplayer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no clubplayer provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clubplayerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	clubplayerInsertCacheMut.RLock()
	cache, cached := clubplayerInsertCache[key]
	clubplayerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			clubplayerAllColumns,
			clubplayerColumnsWithDefault,
			clubplayerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(clubplayerType, clubplayerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(clubplayerType, clubplayerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `clubplayer` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `clubplayer` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `clubplayer` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, clubplayerPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into clubplayer")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ClubID,
		o.PlayerID,
		o.FromDate,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for clubplayer")
	}

CacheNoHooks:
	if !cached {
		clubplayerInsertCacheMut.Lock()
		clubplayerInsertCache[key] = cache
		clubplayerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Clubplayer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Clubplayer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	clubplayerUpdateCacheMut.RLock()
	cache, cached := clubplayerUpdateCache[key]
	clubplayerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			clubplayerAllColumns,
			clubplayerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update clubplayer, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `clubplayer` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, clubplayerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(clubplayerType, clubplayerMapping, append(wl, clubplayerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update clubplayer row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for clubplayer")
	}

	if !cached {
		clubplayerUpdateCacheMut.Lock()
		clubplayerUpdateCache[key] = cache
		clubplayerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q clubplayerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for clubplayer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for clubplayer")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClubplayerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clubplayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `clubplayer` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clubplayerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in clubplayer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all clubplayer")
	}
	return rowsAff, nil
}

var mySQLClubplayerUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Clubplayer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no clubplayer provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clubplayerColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLClubplayerUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	clubplayerUpsertCacheMut.RLock()
	cache, cached := clubplayerUpsertCache[key]
	clubplayerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			clubplayerAllColumns,
			clubplayerColumnsWithDefault,
			clubplayerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			clubplayerAllColumns,
			clubplayerPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert clubplayer, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "clubplayer", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `clubplayer` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(clubplayerType, clubplayerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(clubplayerType, clubplayerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for clubplayer")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(clubplayerType, clubplayerMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for clubplayer")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for clubplayer")
	}

CacheNoHooks:
	if !cached {
		clubplayerUpsertCacheMut.Lock()
		clubplayerUpsertCache[key] = cache
		clubplayerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Clubplayer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Clubplayer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Clubplayer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), clubplayerPrimaryKeyMapping)
	sql := "DELETE FROM `clubplayer` WHERE `ClubID`=? AND `PlayerID`=? AND `FromDate`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from clubplayer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for clubplayer")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q clubplayerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no clubplayerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from clubplayer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for clubplayer")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClubplayerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(clubplayerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clubplayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `clubplayer` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clubplayerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from clubplayer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for clubplayer")
	}

	if len(clubplayerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Clubplayer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindClubplayer(ctx, exec, o.ClubID, o.PlayerID, o.FromDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClubplayerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClubplayerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clubplayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `clubplayer`.* FROM `clubplayer` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clubplayerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ClubplayerSlice")
	}

	*o = slice

	return nil
}

// ClubplayerExists checks if the Clubplayer row exists.
func ClubplayerExists(ctx context.Context, exec boil.ContextExecutor, clubID int, playerID int, fromDate time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `clubplayer` where `ClubID`=? AND `PlayerID`=? AND `FromDate`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, clubID, playerID, fromDate)
	}
	row := exec.QueryRowContext(ctx, sql, clubID, playerID, fromDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if clubplayer exists")
	}

	return exists, nil
}
