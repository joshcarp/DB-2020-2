// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Season is an object representing the database table.
type Season struct {
	SeasonID      int    `boil:"SeasonID" json:"SeasonID" toml:"SeasonID" yaml:"SeasonID"`
	SeasonYear    string `boil:"SeasonYear" json:"SeasonYear" toml:"SeasonYear" yaml:"SeasonYear"`
	CompetitionID int    `boil:"CompetitionID" json:"CompetitionID" toml:"CompetitionID" yaml:"CompetitionID"`

	R *seasonR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L seasonL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SeasonColumns = struct {
	SeasonID      string
	SeasonYear    string
	CompetitionID string
}{
	SeasonID:      "SeasonID",
	SeasonYear:    "SeasonYear",
	CompetitionID: "CompetitionID",
}

// Generated where

var SeasonWhere = struct {
	SeasonID      whereHelperint
	SeasonYear    whereHelperstring
	CompetitionID whereHelperint
}{
	SeasonID:      whereHelperint{field: "`season`.`SeasonID`"},
	SeasonYear:    whereHelperstring{field: "`season`.`SeasonYear`"},
	CompetitionID: whereHelperint{field: "`season`.`CompetitionID`"},
}

// SeasonRels is where relationship names are stored.
var SeasonRels = struct {
	CompetitionID string
	SeasonIDGames string
}{
	CompetitionID: "CompetitionID",
	SeasonIDGames: "SeasonIDGames",
}

// seasonR is where relationships are stored.
type seasonR struct {
	CompetitionID *Competition
	SeasonIDGames GameSlice
}

// NewStruct creates a new relationship struct
func (*seasonR) NewStruct() *seasonR {
	return &seasonR{}
}

// seasonL is where Load methods for each relationship are stored.
type seasonL struct{}

var (
	seasonAllColumns            = []string{"SeasonID", "SeasonYear", "CompetitionID"}
	seasonColumnsWithoutDefault = []string{"SeasonID", "SeasonYear", "CompetitionID"}
	seasonColumnsWithDefault    = []string{}
	seasonPrimaryKeyColumns     = []string{"SeasonID"}
)

type (
	// SeasonSlice is an alias for a slice of pointers to Season.
	// This should generally be used opposed to []Season.
	SeasonSlice []*Season
	// SeasonHook is the signature for custom Season hook methods
	SeasonHook func(context.Context, boil.ContextExecutor, *Season) error

	seasonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	seasonType                 = reflect.TypeOf(&Season{})
	seasonMapping              = queries.MakeStructMapping(seasonType)
	seasonPrimaryKeyMapping, _ = queries.BindMapping(seasonType, seasonMapping, seasonPrimaryKeyColumns)
	seasonInsertCacheMut       sync.RWMutex
	seasonInsertCache          = make(map[string]insertCache)
	seasonUpdateCacheMut       sync.RWMutex
	seasonUpdateCache          = make(map[string]updateCache)
	seasonUpsertCacheMut       sync.RWMutex
	seasonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var seasonBeforeInsertHooks []SeasonHook
var seasonBeforeUpdateHooks []SeasonHook
var seasonBeforeDeleteHooks []SeasonHook
var seasonBeforeUpsertHooks []SeasonHook

var seasonAfterInsertHooks []SeasonHook
var seasonAfterSelectHooks []SeasonHook
var seasonAfterUpdateHooks []SeasonHook
var seasonAfterDeleteHooks []SeasonHook
var seasonAfterUpsertHooks []SeasonHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Season) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seasonBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Season) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seasonBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Season) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seasonBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Season) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seasonBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Season) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seasonAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Season) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seasonAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Season) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seasonAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Season) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seasonAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Season) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seasonAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSeasonHook registers your hook function for all future operations.
func AddSeasonHook(hookPoint boil.HookPoint, seasonHook SeasonHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		seasonBeforeInsertHooks = append(seasonBeforeInsertHooks, seasonHook)
	case boil.BeforeUpdateHook:
		seasonBeforeUpdateHooks = append(seasonBeforeUpdateHooks, seasonHook)
	case boil.BeforeDeleteHook:
		seasonBeforeDeleteHooks = append(seasonBeforeDeleteHooks, seasonHook)
	case boil.BeforeUpsertHook:
		seasonBeforeUpsertHooks = append(seasonBeforeUpsertHooks, seasonHook)
	case boil.AfterInsertHook:
		seasonAfterInsertHooks = append(seasonAfterInsertHooks, seasonHook)
	case boil.AfterSelectHook:
		seasonAfterSelectHooks = append(seasonAfterSelectHooks, seasonHook)
	case boil.AfterUpdateHook:
		seasonAfterUpdateHooks = append(seasonAfterUpdateHooks, seasonHook)
	case boil.AfterDeleteHook:
		seasonAfterDeleteHooks = append(seasonAfterDeleteHooks, seasonHook)
	case boil.AfterUpsertHook:
		seasonAfterUpsertHooks = append(seasonAfterUpsertHooks, seasonHook)
	}
}

// One returns a single season record from the query.
func (q seasonQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Season, error) {
	o := &Season{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for season")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Season records from the query.
func (q seasonQuery) All(ctx context.Context, exec boil.ContextExecutor) (SeasonSlice, error) {
	var o []*Season

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Season slice")
	}

	if len(seasonAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Season records in the query.
func (q seasonQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count season rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q seasonQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if season exists")
	}

	return count > 0, nil
}

//// CompetitionID pointed to by the foreign key.
//func (o *Season) CompetitionID(mods ...qm.QueryMod) competitionQuery {
//	queryMods := []qm.QueryMod{
//		qm.Where("`CompetitionID` = ?", o.CompetitionID),
//	}
//
//	queryMods = append(queryMods, mods...)
//
//	query := Competitions(queryMods...)
//	queries.SetFrom(query.Query, "`competition`")
//
//	return query
//}

// SeasonIDGames retrieves all the game's Games with an executor via SeasonID column.
func (o *Season) SeasonIDGames(mods ...qm.QueryMod) gameQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`game`.`SeasonID`=?", o.SeasonID),
	)

	query := Games(queryMods...)
	queries.SetFrom(query.Query, "`game`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`game`.*"})
	}

	return query
}

// LoadCompetitionID allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (seasonL) LoadCompetitionID(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSeason interface{}, mods queries.Applicator) error {
	var slice []*Season
	var object *Season

	if singular {
		object = maybeSeason.(*Season)
	} else {
		slice = *maybeSeason.(*[]*Season)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &seasonR{}
		}
		args = append(args, object.CompetitionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seasonR{}
			}

			for _, a := range args {
				if a == obj.CompetitionID {
					continue Outer
				}
			}

			args = append(args, obj.CompetitionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`competition`), qm.WhereIn(`competition.CompetitionID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Competition")
	}

	var resultSlice []*Competition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Competition")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for competition")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for competition")
	}

	if len(seasonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CompetitionID = foreign
		if foreign.R == nil {
			foreign.R = &competitionR{}
		}
		foreign.R.CompetitionIDSeasons = append(foreign.R.CompetitionIDSeasons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CompetitionID == foreign.CompetitionID {
				local.R.CompetitionID = foreign
				if foreign.R == nil {
					foreign.R = &competitionR{}
				}
				foreign.R.CompetitionIDSeasons = append(foreign.R.CompetitionIDSeasons, local)
				break
			}
		}
	}

	return nil
}

// LoadSeasonIDGames allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (seasonL) LoadSeasonIDGames(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSeason interface{}, mods queries.Applicator) error {
	var slice []*Season
	var object *Season

	if singular {
		object = maybeSeason.(*Season)
	} else {
		slice = *maybeSeason.(*[]*Season)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &seasonR{}
		}
		args = append(args, object.SeasonID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seasonR{}
			}

			for _, a := range args {
				if a == obj.SeasonID {
					continue Outer
				}
			}

			args = append(args, obj.SeasonID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`game`), qm.WhereIn(`game.SeasonID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load game")
	}

	var resultSlice []*Game
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice game")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on game")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game")
	}

	if len(gameAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SeasonIDGames = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gameR{}
			}
			foreign.R.SeasonID = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SeasonID == foreign.SeasonID {
				local.R.SeasonIDGames = append(local.R.SeasonIDGames, foreign)
				if foreign.R == nil {
					foreign.R = &gameR{}
				}
				foreign.R.SeasonID = local
				break
			}
		}
	}

	return nil
}

// SetCompetitionID of the season to the related item.
// Sets o.R.CompetitionID to related.
// Adds o to related.R.CompetitionIDSeasons.
func (o *Season) SetCompetitionID(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Competition) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `season` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"CompetitionID"}),
		strmangle.WhereClause("`", "`", 0, seasonPrimaryKeyColumns),
	)
	values := []interface{}{related.CompetitionID, o.SeasonID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CompetitionID = related.CompetitionID
	if o.R == nil {
		o.R = &seasonR{
			CompetitionID: related,
		}
	} else {
		o.R.CompetitionID = related
	}

	if related.R == nil {
		related.R = &competitionR{
			CompetitionIDSeasons: SeasonSlice{o},
		}
	} else {
		related.R.CompetitionIDSeasons = append(related.R.CompetitionIDSeasons, o)
	}

	return nil
}

// AddSeasonIDGames adds the given related objects to the existing relationships
// of the season, optionally inserting them as new records.
// Appends related to o.R.SeasonIDGames.
// Sets related.R.SeasonID appropriately.
func (o *Season) AddSeasonIDGames(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Game) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SeasonID = o.SeasonID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `game` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SeasonID"}),
				strmangle.WhereClause("`", "`", 0, gamePrimaryKeyColumns),
			)
			values := []interface{}{o.SeasonID, rel.GameID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SeasonID = o.SeasonID
		}
	}

	if o.R == nil {
		o.R = &seasonR{
			SeasonIDGames: related,
		}
	} else {
		o.R.SeasonIDGames = append(o.R.SeasonIDGames, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gameR{
				SeasonID: o,
			}
		} else {
			rel.R.SeasonID = o
		}
	}
	return nil
}

// Seasons retrieves all the records using an executor.
func Seasons(mods ...qm.QueryMod) seasonQuery {
	mods = append(mods, qm.From("`season`"))
	return seasonQuery{NewQuery(mods...)}
}

// FindSeason retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSeason(ctx context.Context, exec boil.ContextExecutor, seasonID int, selectCols ...string) (*Season, error) {
	seasonObj := &Season{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `season` where `SeasonID`=?", sel,
	)

	q := queries.Raw(query, seasonID)

	err := q.Bind(ctx, exec, seasonObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from season")
	}

	return seasonObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Season) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no season provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(seasonColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	seasonInsertCacheMut.RLock()
	cache, cached := seasonInsertCache[key]
	seasonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			seasonAllColumns,
			seasonColumnsWithDefault,
			seasonColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(seasonType, seasonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(seasonType, seasonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `season` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `season` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `season` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, seasonPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into season")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SeasonID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for season")
	}

CacheNoHooks:
	if !cached {
		seasonInsertCacheMut.Lock()
		seasonInsertCache[key] = cache
		seasonInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Season.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Season) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	seasonUpdateCacheMut.RLock()
	cache, cached := seasonUpdateCache[key]
	seasonUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			seasonAllColumns,
			seasonPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update season, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `season` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, seasonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(seasonType, seasonMapping, append(wl, seasonPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update season row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for season")
	}

	if !cached {
		seasonUpdateCacheMut.Lock()
		seasonUpdateCache[key] = cache
		seasonUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q seasonQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for season")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for season")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SeasonSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seasonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `season` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, seasonPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in season slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all season")
	}
	return rowsAff, nil
}

var mySQLSeasonUniqueColumns = []string{
	"SeasonID",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Season) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no season provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(seasonColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSeasonUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	seasonUpsertCacheMut.RLock()
	cache, cached := seasonUpsertCache[key]
	seasonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			seasonAllColumns,
			seasonColumnsWithDefault,
			seasonColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			seasonAllColumns,
			seasonPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert season, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "season", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `season` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(seasonType, seasonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(seasonType, seasonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for season")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(seasonType, seasonMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for season")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for season")
	}

CacheNoHooks:
	if !cached {
		seasonUpsertCacheMut.Lock()
		seasonUpsertCache[key] = cache
		seasonUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Season record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Season) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Season provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), seasonPrimaryKeyMapping)
	sql := "DELETE FROM `season` WHERE `SeasonID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from season")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for season")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q seasonQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no seasonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from season")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for season")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SeasonSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(seasonBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seasonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `season` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, seasonPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from season slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for season")
	}

	if len(seasonAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Season) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSeason(ctx, exec, o.SeasonID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SeasonSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SeasonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seasonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `season`.* FROM `season` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, seasonPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SeasonSlice")
	}

	*o = slice

	return nil
}

// SeasonExists checks if the Season row exists.
func SeasonExists(ctx context.Context, exec boil.ContextExecutor, seasonID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `season` where `SeasonID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, seasonID)
	}
	row := exec.QueryRowContext(ctx, sql, seasonID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if season exists")
	}

	return exists, nil
}
