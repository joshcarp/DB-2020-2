// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testClubs(t *testing.T) {
	t.Parallel()

	query := Clubs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testClubsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Clubs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClubsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Clubs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Clubs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClubsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ClubSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Clubs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClubsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ClubExists(ctx, tx, o.ClubID)
	if err != nil {
		t.Errorf("Unable to check if Club exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ClubExists to return true, but got false.")
	}
}

func testClubsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	clubFound, err := FindClub(ctx, tx, o.ClubID)
	if err != nil {
		t.Error(err)
	}

	if clubFound == nil {
		t.Error("want a record, got nil")
	}
}

func testClubsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Clubs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testClubsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Clubs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testClubsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	clubOne := &Club{}
	clubTwo := &Club{}
	if err = randomize.Struct(seed, clubOne, clubDBTypes, false, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}
	if err = randomize.Struct(seed, clubTwo, clubDBTypes, false, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = clubOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = clubTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Clubs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testClubsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	clubOne := &Club{}
	clubTwo := &Club{}
	if err = randomize.Struct(seed, clubOne, clubDBTypes, false, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}
	if err = randomize.Struct(seed, clubTwo, clubDBTypes, false, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = clubOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = clubTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Clubs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func clubBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Club) error {
	*o = Club{}
	return nil
}

func clubAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Club) error {
	*o = Club{}
	return nil
}

func clubAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Club) error {
	*o = Club{}
	return nil
}

func clubBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Club) error {
	*o = Club{}
	return nil
}

func clubAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Club) error {
	*o = Club{}
	return nil
}

func clubBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Club) error {
	*o = Club{}
	return nil
}

func clubAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Club) error {
	*o = Club{}
	return nil
}

func clubBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Club) error {
	*o = Club{}
	return nil
}

func clubAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Club) error {
	*o = Club{}
	return nil
}

func testClubsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Club{}
	o := &Club{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, clubDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Club object: %s", err)
	}

	AddClubHook(boil.BeforeInsertHook, clubBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	clubBeforeInsertHooks = []ClubHook{}

	AddClubHook(boil.AfterInsertHook, clubAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	clubAfterInsertHooks = []ClubHook{}

	AddClubHook(boil.AfterSelectHook, clubAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	clubAfterSelectHooks = []ClubHook{}

	AddClubHook(boil.BeforeUpdateHook, clubBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	clubBeforeUpdateHooks = []ClubHook{}

	AddClubHook(boil.AfterUpdateHook, clubAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	clubAfterUpdateHooks = []ClubHook{}

	AddClubHook(boil.BeforeDeleteHook, clubBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	clubBeforeDeleteHooks = []ClubHook{}

	AddClubHook(boil.AfterDeleteHook, clubAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	clubAfterDeleteHooks = []ClubHook{}

	AddClubHook(boil.BeforeUpsertHook, clubBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	clubBeforeUpsertHooks = []ClubHook{}

	AddClubHook(boil.AfterUpsertHook, clubAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	clubAfterUpsertHooks = []ClubHook{}
}

func testClubsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Clubs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testClubsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(clubColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Clubs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testClubToManyClubIDClubplayers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Club
	var b, c Clubplayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, clubplayerDBTypes, false, clubplayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, clubplayerDBTypes, false, clubplayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ClubID = a.ClubID
	c.ClubID = a.ClubID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ClubIDClubplayers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ClubID == b.ClubID {
			bFound = true
		}
		if v.ClubID == c.ClubID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ClubSlice{&a}
	if err = a.L.LoadClubIDClubplayers(ctx, tx, false, (*[]*Club)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ClubIDClubplayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ClubIDClubplayers = nil
	if err = a.L.LoadClubIDClubplayers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ClubIDClubplayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testClubToManyClubIDTeams(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Club
	var b, c Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ClubID = a.ClubID
	c.ClubID = a.ClubID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ClubIDTeams().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ClubID == b.ClubID {
			bFound = true
		}
		if v.ClubID == c.ClubID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ClubSlice{&a}
	if err = a.L.LoadClubIDTeams(ctx, tx, false, (*[]*Club)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ClubIDTeams); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ClubIDTeams = nil
	if err = a.L.LoadClubIDTeams(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ClubIDTeams); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testClubToManyAddOpClubIDClubplayers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Club
	var b, c, d, e Clubplayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clubDBTypes, false, strmangle.SetComplement(clubPrimaryKeyColumns, clubColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Clubplayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, clubplayerDBTypes, false, strmangle.SetComplement(clubplayerPrimaryKeyColumns, clubplayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Clubplayer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddClubIDClubplayers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ClubID != first.ClubID {
			t.Error("foreign key was wrong value", a.ClubID, first.ClubID)
		}
		if a.ClubID != second.ClubID {
			t.Error("foreign key was wrong value", a.ClubID, second.ClubID)
		}

		if first.R.ClubID != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ClubID != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ClubIDClubplayers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ClubIDClubplayers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ClubIDClubplayers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testClubToManyAddOpClubIDTeams(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Club
	var b, c, d, e Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clubDBTypes, false, strmangle.SetComplement(clubPrimaryKeyColumns, clubColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Team{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Team{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddClubIDTeams(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ClubID != first.ClubID {
			t.Error("foreign key was wrong value", a.ClubID, first.ClubID)
		}
		if a.ClubID != second.ClubID {
			t.Error("foreign key was wrong value", a.ClubID, second.ClubID)
		}

		if first.R.ClubID != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ClubID != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ClubIDTeams[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ClubIDTeams[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ClubIDTeams().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testClubsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testClubsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ClubSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testClubsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Clubs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	clubDBTypes = map[string]string{`ClubID`: `int`, `ClubName`: `varchar`, `Address1`: `varchar`, `Address2`: `varchar`, `Suburb`: `varchar`, `Postcode`: `char`}
	_           = bytes.MinRead
)

func testClubsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(clubPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(clubAllColumns) == len(clubPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Clubs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, clubDBTypes, true, clubPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testClubsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(clubAllColumns) == len(clubPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Clubs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, clubDBTypes, true, clubPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(clubAllColumns, clubPrimaryKeyColumns) {
		fields = clubAllColumns
	} else {
		fields = strmangle.SetComplement(
			clubAllColumns,
			clubPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ClubSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testClubsUpsert(t *testing.T) {
	t.Parallel()

	if len(clubAllColumns) == len(clubPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLClubUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Club{}
	if err = randomize.Struct(seed, &o, clubDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Club: %s", err)
	}

	count, err := Clubs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, clubDBTypes, false, clubPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Club: %s", err)
	}

	count, err = Clubs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
