// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Clubs", testClubs)
	t.Run("Clubplayers", testClubplayers)
	t.Run("Competitions", testCompetitions)
	t.Run("Games", testGames)
	t.Run("Players", testPlayers)
	t.Run("Playerteams", testPlayerteams)
	t.Run("Seasons", testSeasons)
	t.Run("Teams", testTeams)
}

func TestDelete(t *testing.T) {
	t.Run("Clubs", testClubsDelete)
	t.Run("Clubplayers", testClubplayersDelete)
	t.Run("Competitions", testCompetitionsDelete)
	t.Run("Games", testGamesDelete)
	t.Run("Players", testPlayersDelete)
	t.Run("Playerteams", testPlayerteamsDelete)
	t.Run("Seasons", testSeasonsDelete)
	t.Run("Teams", testTeamsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Clubs", testClubsQueryDeleteAll)
	t.Run("Clubplayers", testClubplayersQueryDeleteAll)
	t.Run("Competitions", testCompetitionsQueryDeleteAll)
	t.Run("Games", testGamesQueryDeleteAll)
	t.Run("Players", testPlayersQueryDeleteAll)
	t.Run("Playerteams", testPlayerteamsQueryDeleteAll)
	t.Run("Seasons", testSeasonsQueryDeleteAll)
	t.Run("Teams", testTeamsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Clubs", testClubsSliceDeleteAll)
	t.Run("Clubplayers", testClubplayersSliceDeleteAll)
	t.Run("Competitions", testCompetitionsSliceDeleteAll)
	t.Run("Games", testGamesSliceDeleteAll)
	t.Run("Players", testPlayersSliceDeleteAll)
	t.Run("Playerteams", testPlayerteamsSliceDeleteAll)
	t.Run("Seasons", testSeasonsSliceDeleteAll)
	t.Run("Teams", testTeamsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Clubs", testClubsExists)
	t.Run("Clubplayers", testClubplayersExists)
	t.Run("Competitions", testCompetitionsExists)
	t.Run("Games", testGamesExists)
	t.Run("Players", testPlayersExists)
	t.Run("Playerteams", testPlayerteamsExists)
	t.Run("Seasons", testSeasonsExists)
	t.Run("Teams", testTeamsExists)
}

func TestFind(t *testing.T) {
	t.Run("Clubs", testClubsFind)
	t.Run("Clubplayers", testClubplayersFind)
	t.Run("Competitions", testCompetitionsFind)
	t.Run("Games", testGamesFind)
	t.Run("Players", testPlayersFind)
	t.Run("Playerteams", testPlayerteamsFind)
	t.Run("Seasons", testSeasonsFind)
	t.Run("Teams", testTeamsFind)
}

func TestBind(t *testing.T) {
	t.Run("Clubs", testClubsBind)
	t.Run("Clubplayers", testClubplayersBind)
	t.Run("Competitions", testCompetitionsBind)
	t.Run("Games", testGamesBind)
	t.Run("Players", testPlayersBind)
	t.Run("Playerteams", testPlayerteamsBind)
	t.Run("Seasons", testSeasonsBind)
	t.Run("Teams", testTeamsBind)
}

func TestOne(t *testing.T) {
	t.Run("Clubs", testClubsOne)
	t.Run("Clubplayers", testClubplayersOne)
	t.Run("Competitions", testCompetitionsOne)
	t.Run("Games", testGamesOne)
	t.Run("Players", testPlayersOne)
	t.Run("Playerteams", testPlayerteamsOne)
	t.Run("Seasons", testSeasonsOne)
	t.Run("Teams", testTeamsOne)
}

func TestAll(t *testing.T) {
	t.Run("Clubs", testClubsAll)
	t.Run("Clubplayers", testClubplayersAll)
	t.Run("Competitions", testCompetitionsAll)
	t.Run("Games", testGamesAll)
	t.Run("Players", testPlayersAll)
	t.Run("Playerteams", testPlayerteamsAll)
	t.Run("Seasons", testSeasonsAll)
	t.Run("Teams", testTeamsAll)
}

func TestCount(t *testing.T) {
	t.Run("Clubs", testClubsCount)
	t.Run("Clubplayers", testClubplayersCount)
	t.Run("Competitions", testCompetitionsCount)
	t.Run("Games", testGamesCount)
	t.Run("Players", testPlayersCount)
	t.Run("Playerteams", testPlayerteamsCount)
	t.Run("Seasons", testSeasonsCount)
	t.Run("Teams", testTeamsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Clubs", testClubsHooks)
	t.Run("Clubplayers", testClubplayersHooks)
	t.Run("Competitions", testCompetitionsHooks)
	t.Run("Games", testGamesHooks)
	t.Run("Players", testPlayersHooks)
	t.Run("Playerteams", testPlayerteamsHooks)
	t.Run("Seasons", testSeasonsHooks)
	t.Run("Teams", testTeamsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Clubs", testClubsInsert)
	t.Run("Clubs", testClubsInsertWhitelist)
	t.Run("Clubplayers", testClubplayersInsert)
	t.Run("Clubplayers", testClubplayersInsertWhitelist)
	t.Run("Competitions", testCompetitionsInsert)
	t.Run("Competitions", testCompetitionsInsertWhitelist)
	t.Run("Games", testGamesInsert)
	t.Run("Games", testGamesInsertWhitelist)
	t.Run("Players", testPlayersInsert)
	t.Run("Players", testPlayersInsertWhitelist)
	t.Run("Playerteams", testPlayerteamsInsert)
	t.Run("Playerteams", testPlayerteamsInsertWhitelist)
	t.Run("Seasons", testSeasonsInsert)
	t.Run("Seasons", testSeasonsInsertWhitelist)
	t.Run("Teams", testTeamsInsert)
	t.Run("Teams", testTeamsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ClubplayerToClubUsingClubID", testClubplayerToOneClubUsingClubID)
	t.Run("ClubplayerToPlayerUsingPlayerID", testClubplayerToOnePlayerUsingPlayerID)
	t.Run("GameToSeasonUsingSeasonID", testGameToOneSeasonUsingSeasonID)
	t.Run("GameToTeamUsingTeam1", testGameToOneTeamUsingTeam1)
	t.Run("GameToTeamUsingTeam2", testGameToOneTeamUsingTeam2)
	t.Run("PlayerteamToGameUsingGameID", testPlayerteamToOneGameUsingGameID)
	t.Run("PlayerteamToPlayerUsingPlayerID", testPlayerteamToOnePlayerUsingPlayerID)
	t.Run("PlayerteamToTeamUsingTeamID", testPlayerteamToOneTeamUsingTeamID)
	t.Run("SeasonToCompetitionUsingCompetitionID", testSeasonToOneCompetitionUsingCompetitionID)
	t.Run("TeamToClubUsingClubID", testTeamToOneClubUsingClubID)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ClubToClubIDClubplayers", testClubToManyClubIDClubplayers)
	t.Run("ClubToClubIDTeams", testClubToManyClubIDTeams)
	t.Run("CompetitionToCompetitionIDSeasons", testCompetitionToManyCompetitionIDSeasons)
	t.Run("GameToGameIDPlayerteams", testGameToManyGameIDPlayerteams)
	t.Run("PlayerToPlayerIDClubplayers", testPlayerToManyPlayerIDClubplayers)
	t.Run("PlayerToPlayerIDPlayerteams", testPlayerToManyPlayerIDPlayerteams)
	t.Run("SeasonToSeasonIDGames", testSeasonToManySeasonIDGames)
	t.Run("TeamToTeam1Games", testTeamToManyTeam1Games)
	t.Run("TeamToTeam2Games", testTeamToManyTeam2Games)
	t.Run("TeamToTeamIDPlayerteams", testTeamToManyTeamIDPlayerteams)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ClubplayerToClubUsingClubIDClubplayers", testClubplayerToOneSetOpClubUsingClubID)
	t.Run("ClubplayerToPlayerUsingPlayerIDClubplayers", testClubplayerToOneSetOpPlayerUsingPlayerID)
	t.Run("GameToSeasonUsingSeasonIDGames", testGameToOneSetOpSeasonUsingSeasonID)
	t.Run("GameToTeamUsingTeam1Games", testGameToOneSetOpTeamUsingTeam1)
	t.Run("GameToTeamUsingTeam2Games", testGameToOneSetOpTeamUsingTeam2)
	t.Run("PlayerteamToGameUsingGameIDPlayerteams", testPlayerteamToOneSetOpGameUsingGameID)
	t.Run("PlayerteamToPlayerUsingPlayerIDPlayerteams", testPlayerteamToOneSetOpPlayerUsingPlayerID)
	t.Run("PlayerteamToTeamUsingTeamIDPlayerteams", testPlayerteamToOneSetOpTeamUsingTeamID)
	t.Run("SeasonToCompetitionUsingCompetitionIDSeasons", testSeasonToOneSetOpCompetitionUsingCompetitionID)
	t.Run("TeamToClubUsingClubIDTeams", testTeamToOneSetOpClubUsingClubID)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ClubToClubIDClubplayers", testClubToManyAddOpClubIDClubplayers)
	t.Run("ClubToClubIDTeams", testClubToManyAddOpClubIDTeams)
	t.Run("CompetitionToCompetitionIDSeasons", testCompetitionToManyAddOpCompetitionIDSeasons)
	t.Run("GameToGameIDPlayerteams", testGameToManyAddOpGameIDPlayerteams)
	t.Run("PlayerToPlayerIDClubplayers", testPlayerToManyAddOpPlayerIDClubplayers)
	t.Run("PlayerToPlayerIDPlayerteams", testPlayerToManyAddOpPlayerIDPlayerteams)
	t.Run("SeasonToSeasonIDGames", testSeasonToManyAddOpSeasonIDGames)
	t.Run("TeamToTeam1Games", testTeamToManyAddOpTeam1Games)
	t.Run("TeamToTeam2Games", testTeamToManyAddOpTeam2Games)
	t.Run("TeamToTeamIDPlayerteams", testTeamToManyAddOpTeamIDPlayerteams)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Clubs", testClubsReload)
	t.Run("Clubplayers", testClubplayersReload)
	t.Run("Competitions", testCompetitionsReload)
	t.Run("Games", testGamesReload)
	t.Run("Players", testPlayersReload)
	t.Run("Playerteams", testPlayerteamsReload)
	t.Run("Seasons", testSeasonsReload)
	t.Run("Teams", testTeamsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Clubs", testClubsReloadAll)
	t.Run("Clubplayers", testClubplayersReloadAll)
	t.Run("Competitions", testCompetitionsReloadAll)
	t.Run("Games", testGamesReloadAll)
	t.Run("Players", testPlayersReloadAll)
	t.Run("Playerteams", testPlayerteamsReloadAll)
	t.Run("Seasons", testSeasonsReloadAll)
	t.Run("Teams", testTeamsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Clubs", testClubsSelect)
	t.Run("Clubplayers", testClubplayersSelect)
	t.Run("Competitions", testCompetitionsSelect)
	t.Run("Games", testGamesSelect)
	t.Run("Players", testPlayersSelect)
	t.Run("Playerteams", testPlayerteamsSelect)
	t.Run("Seasons", testSeasonsSelect)
	t.Run("Teams", testTeamsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Clubs", testClubsUpdate)
	t.Run("Clubplayers", testClubplayersUpdate)
	t.Run("Competitions", testCompetitionsUpdate)
	t.Run("Games", testGamesUpdate)
	t.Run("Players", testPlayersUpdate)
	t.Run("Playerteams", testPlayerteamsUpdate)
	t.Run("Seasons", testSeasonsUpdate)
	t.Run("Teams", testTeamsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Clubs", testClubsSliceUpdateAll)
	t.Run("Clubplayers", testClubplayersSliceUpdateAll)
	t.Run("Competitions", testCompetitionsSliceUpdateAll)
	t.Run("Games", testGamesSliceUpdateAll)
	t.Run("Players", testPlayersSliceUpdateAll)
	t.Run("Playerteams", testPlayerteamsSliceUpdateAll)
	t.Run("Seasons", testSeasonsSliceUpdateAll)
	t.Run("Teams", testTeamsSliceUpdateAll)
}
