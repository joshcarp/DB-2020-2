// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Game is an object representing the database table.
type Game struct {
	GameID    int       `boil:"GameID" json:"GameID" toml:"GameID" yaml:"GameID"`
	Round     int       `boil:"Round" json:"Round" toml:"Round" yaml:"Round"`
	SeasonID  int       `boil:"SeasonID" json:"SeasonID" toml:"SeasonID" yaml:"SeasonID"`
	Team1     int       `boil:"Team1" json:"Team1" toml:"Team1" yaml:"Team1"`
	Team2     int       `boil:"Team2" json:"Team2" toml:"Team2" yaml:"Team2"`
	T1Score   null.Int  `boil:"T1Score" json:"T1Score,omitempty" toml:"T1Score" yaml:"T1Score,omitempty"`
	T2Score   null.Int  `boil:"T2Score" json:"T2Score,omitempty" toml:"T2Score" yaml:"T2Score,omitempty"`
	MatchDate time.Time `boil:"MatchDate" json:"MatchDate" toml:"MatchDate" yaml:"MatchDate"`
	MatchTime string    `boil:"MatchTime" json:"MatchTime" toml:"MatchTime" yaml:"MatchTime"`

	R *gameR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gameL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GameColumns = struct {
	GameID    string
	Round     string
	SeasonID  string
	Team1     string
	Team2     string
	T1Score   string
	T2Score   string
	MatchDate string
	MatchTime string
}{
	GameID:    "GameID",
	Round:     "Round",
	SeasonID:  "SeasonID",
	Team1:     "Team1",
	Team2:     "Team2",
	T1Score:   "T1Score",
	T2Score:   "T2Score",
	MatchDate: "MatchDate",
	MatchTime: "MatchTime",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var GameWhere = struct {
	GameID    whereHelperint
	Round     whereHelperint
	SeasonID  whereHelperint
	Team1     whereHelperint
	Team2     whereHelperint
	T1Score   whereHelpernull_Int
	T2Score   whereHelpernull_Int
	MatchDate whereHelpertime_Time
	MatchTime whereHelperstring
}{
	GameID:    whereHelperint{field: "`game`.`GameID`"},
	Round:     whereHelperint{field: "`game`.`Round`"},
	SeasonID:  whereHelperint{field: "`game`.`SeasonID`"},
	Team1:     whereHelperint{field: "`game`.`Team1`"},
	Team2:     whereHelperint{field: "`game`.`Team2`"},
	T1Score:   whereHelpernull_Int{field: "`game`.`T1Score`"},
	T2Score:   whereHelpernull_Int{field: "`game`.`T2Score`"},
	MatchDate: whereHelpertime_Time{field: "`game`.`MatchDate`"},
	MatchTime: whereHelperstring{field: "`game`.`MatchTime`"},
}

// GameRels is where relationship names are stored.
var GameRels = struct {
	SeasonID          string
	Team1             string
	Team2             string
	GameIDPlayerteams string
}{
	SeasonID:          "SeasonID",
	Team1:             "Team1",
	Team2:             "Team2",
	GameIDPlayerteams: "GameIDPlayerteams",
}

// gameR is where relationships are stored.
type gameR struct {
	SeasonID          *Season
	Team1             *Team
	Team2             *Team
	GameIDPlayerteams PlayerteamSlice
}

// NewStruct creates a new relationship struct
func (*gameR) NewStruct() *gameR {
	return &gameR{}
}

// gameL is where Load methods for each relationship are stored.
type gameL struct{}

var (
	gameAllColumns            = []string{"GameID", "Round", "SeasonID", "Team1", "Team2", "T1Score", "T2Score", "MatchDate", "MatchTime"}
	gameColumnsWithoutDefault = []string{"GameID", "Round", "SeasonID", "Team1", "Team2", "T1Score", "T2Score", "MatchDate", "MatchTime"}
	gameColumnsWithDefault    = []string{}
	gamePrimaryKeyColumns     = []string{"GameID"}
)

type (
	// GameSlice is an alias for a slice of pointers to Game.
	// This should generally be used opposed to []Game.
	GameSlice []*Game
	// GameHook is the signature for custom Game hook methods
	GameHook func(context.Context, boil.ContextExecutor, *Game) error

	gameQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gameType                 = reflect.TypeOf(&Game{})
	gameMapping              = queries.MakeStructMapping(gameType)
	gamePrimaryKeyMapping, _ = queries.BindMapping(gameType, gameMapping, gamePrimaryKeyColumns)
	gameInsertCacheMut       sync.RWMutex
	gameInsertCache          = make(map[string]insertCache)
	gameUpdateCacheMut       sync.RWMutex
	gameUpdateCache          = make(map[string]updateCache)
	gameUpsertCacheMut       sync.RWMutex
	gameUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var gameBeforeInsertHooks []GameHook
var gameBeforeUpdateHooks []GameHook
var gameBeforeDeleteHooks []GameHook
var gameBeforeUpsertHooks []GameHook

var gameAfterInsertHooks []GameHook
var gameAfterSelectHooks []GameHook
var gameAfterUpdateHooks []GameHook
var gameAfterDeleteHooks []GameHook
var gameAfterUpsertHooks []GameHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Game) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Game) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Game) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Game) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Game) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Game) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Game) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Game) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Game) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGameHook registers your hook function for all future operations.
func AddGameHook(hookPoint boil.HookPoint, gameHook GameHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		gameBeforeInsertHooks = append(gameBeforeInsertHooks, gameHook)
	case boil.BeforeUpdateHook:
		gameBeforeUpdateHooks = append(gameBeforeUpdateHooks, gameHook)
	case boil.BeforeDeleteHook:
		gameBeforeDeleteHooks = append(gameBeforeDeleteHooks, gameHook)
	case boil.BeforeUpsertHook:
		gameBeforeUpsertHooks = append(gameBeforeUpsertHooks, gameHook)
	case boil.AfterInsertHook:
		gameAfterInsertHooks = append(gameAfterInsertHooks, gameHook)
	case boil.AfterSelectHook:
		gameAfterSelectHooks = append(gameAfterSelectHooks, gameHook)
	case boil.AfterUpdateHook:
		gameAfterUpdateHooks = append(gameAfterUpdateHooks, gameHook)
	case boil.AfterDeleteHook:
		gameAfterDeleteHooks = append(gameAfterDeleteHooks, gameHook)
	case boil.AfterUpsertHook:
		gameAfterUpsertHooks = append(gameAfterUpsertHooks, gameHook)
	}
}

// One returns a single game record from the query.
func (q gameQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Game, error) {
	o := &Game{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for game")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Game records from the query.
func (q gameQuery) All(ctx context.Context, exec boil.ContextExecutor) (GameSlice, error) {
	var o []*Game

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Game slice")
	}

	if len(gameAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Game records in the query.
func (q gameQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count game rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gameQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if game exists")
	}

	return count > 0, nil
}

//// SeasonID pointed to by the foreign key.
//func (o *Game) SeasonID(mods ...qm.QueryMod) seasonQuery {
//	queryMods := []qm.QueryMod{
//		qm.Where("`SeasonID` = ?", o.SeasonID),
//	}
//
//	queryMods = append(queryMods, mods...)
//
//	query := Seasons(queryMods...)
//	queries.SetFrom(query.Query, "`season`")
//
//	return query
//}

// Team1 pointed to by the foreign key.
//func (o *Game) Team1(mods ...qm.QueryMod) teamQuery {
//	queryMods := []qm.QueryMod{
//		qm.Where("`TeamID` = ?", o.Team1),
//	}
//
//	queryMods = append(queryMods, mods...)
//
//	query := Teams(queryMods...)
//	queries.SetFrom(query.Query, "`team`")
//
//	return query
//}

// Team2 pointed to by the foreign key.
//func (o *Game) Team2(mods ...qm.QueryMod) teamQuery {
//	queryMods := []qm.QueryMod{
//		qm.Where("`TeamID` = ?", o.Team2),
//	}
//
//	queryMods = append(queryMods, mods...)
//
//	query := Teams(queryMods...)
//	queries.SetFrom(query.Query, "`team`")
//
//	return query
//}

// GameIDPlayerteams retrieves all the playerteam's Playerteams with an executor via GameID column.
func (o *Game) GameIDPlayerteams(mods ...qm.QueryMod) playerteamQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`playerteam`.`GameID`=?", o.GameID),
	)

	query := Playerteams(queryMods...)
	queries.SetFrom(query.Query, "`playerteam`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`playerteam`.*"})
	}

	return query
}

// LoadSeasonID allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gameL) LoadSeasonID(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGame interface{}, mods queries.Applicator) error {
	var slice []*Game
	var object *Game

	if singular {
		object = maybeGame.(*Game)
	} else {
		slice = *maybeGame.(*[]*Game)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gameR{}
		}
		args = append(args, object.SeasonID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameR{}
			}

			for _, a := range args {
				if a == obj.SeasonID {
					continue Outer
				}
			}

			args = append(args, obj.SeasonID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`season`), qm.WhereIn(`season.SeasonID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Season")
	}

	var resultSlice []*Season
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Season")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for season")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for season")
	}

	if len(gameAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SeasonID = foreign
		if foreign.R == nil {
			foreign.R = &seasonR{}
		}
		foreign.R.SeasonIDGames = append(foreign.R.SeasonIDGames, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SeasonID == foreign.SeasonID {
				local.R.SeasonID = foreign
				if foreign.R == nil {
					foreign.R = &seasonR{}
				}
				foreign.R.SeasonIDGames = append(foreign.R.SeasonIDGames, local)
				break
			}
		}
	}

	return nil
}

// LoadTeam1 allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gameL) LoadTeam1(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGame interface{}, mods queries.Applicator) error {
	var slice []*Game
	var object *Game

	if singular {
		object = maybeGame.(*Game)
	} else {
		slice = *maybeGame.(*[]*Game)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gameR{}
		}
		args = append(args, object.Team1)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameR{}
			}

			for _, a := range args {
				if a == obj.Team1 {
					continue Outer
				}
			}

			args = append(args, obj.Team1)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`team`), qm.WhereIn(`team.TeamID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for team")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for team")
	}

	if len(gameAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Team1 = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.Team1Games = append(foreign.R.Team1Games, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Team1 == foreign.TeamID {
				local.R.Team1 = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.Team1Games = append(foreign.R.Team1Games, local)
				break
			}
		}
	}

	return nil
}

// LoadTeam2 allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gameL) LoadTeam2(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGame interface{}, mods queries.Applicator) error {
	var slice []*Game
	var object *Game

	if singular {
		object = maybeGame.(*Game)
	} else {
		slice = *maybeGame.(*[]*Game)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gameR{}
		}
		args = append(args, object.Team2)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameR{}
			}

			for _, a := range args {
				if a == obj.Team2 {
					continue Outer
				}
			}

			args = append(args, obj.Team2)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`team`), qm.WhereIn(`team.TeamID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for team")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for team")
	}

	if len(gameAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Team2 = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.Team2Games = append(foreign.R.Team2Games, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Team2 == foreign.TeamID {
				local.R.Team2 = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.Team2Games = append(foreign.R.Team2Games, local)
				break
			}
		}
	}

	return nil
}

// LoadGameIDPlayerteams allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gameL) LoadGameIDPlayerteams(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGame interface{}, mods queries.Applicator) error {
	var slice []*Game
	var object *Game

	if singular {
		object = maybeGame.(*Game)
	} else {
		slice = *maybeGame.(*[]*Game)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gameR{}
		}
		args = append(args, object.GameID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameR{}
			}

			for _, a := range args {
				if a == obj.GameID {
					continue Outer
				}
			}

			args = append(args, obj.GameID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`playerteam`), qm.WhereIn(`playerteam.GameID in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load playerteam")
	}

	var resultSlice []*Playerteam
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice playerteam")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on playerteam")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for playerteam")
	}

	if len(playerteamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GameIDPlayerteams = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerteamR{}
			}
			foreign.R.GameID = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GameID == foreign.GameID {
				local.R.GameIDPlayerteams = append(local.R.GameIDPlayerteams, foreign)
				if foreign.R == nil {
					foreign.R = &playerteamR{}
				}
				foreign.R.GameID = local
				break
			}
		}
	}

	return nil
}

// SetSeasonID of the game to the related item.
// Sets o.R.SeasonID to related.
// Adds o to related.R.SeasonIDGames.
func (o *Game) SetSeasonID(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Season) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `game` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"SeasonID"}),
		strmangle.WhereClause("`", "`", 0, gamePrimaryKeyColumns),
	)
	values := []interface{}{related.SeasonID, o.GameID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SeasonID = related.SeasonID
	if o.R == nil {
		o.R = &gameR{
			SeasonID: related,
		}
	} else {
		o.R.SeasonID = related
	}

	if related.R == nil {
		related.R = &seasonR{
			SeasonIDGames: GameSlice{o},
		}
	} else {
		related.R.SeasonIDGames = append(related.R.SeasonIDGames, o)
	}

	return nil
}

// SetTeam1 of the game to the related item.
// Sets o.R.Team1 to related.
// Adds o to related.R.Team1Games.
func (o *Game) SetTeam1(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `game` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Team1"}),
		strmangle.WhereClause("`", "`", 0, gamePrimaryKeyColumns),
	)
	values := []interface{}{related.TeamID, o.GameID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Team1 = related.TeamID
	if o.R == nil {
		o.R = &gameR{
			Team1: related,
		}
	} else {
		o.R.Team1 = related
	}

	if related.R == nil {
		related.R = &teamR{
			Team1Games: GameSlice{o},
		}
	} else {
		related.R.Team1Games = append(related.R.Team1Games, o)
	}

	return nil
}

// SetTeam2 of the game to the related item.
// Sets o.R.Team2 to related.
// Adds o to related.R.Team2Games.
func (o *Game) SetTeam2(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `game` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Team2"}),
		strmangle.WhereClause("`", "`", 0, gamePrimaryKeyColumns),
	)
	values := []interface{}{related.TeamID, o.GameID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Team2 = related.TeamID
	if o.R == nil {
		o.R = &gameR{
			Team2: related,
		}
	} else {
		o.R.Team2 = related
	}

	if related.R == nil {
		related.R = &teamR{
			Team2Games: GameSlice{o},
		}
	} else {
		related.R.Team2Games = append(related.R.Team2Games, o)
	}

	return nil
}

// AddGameIDPlayerteams adds the given related objects to the existing relationships
// of the game, optionally inserting them as new records.
// Appends related to o.R.GameIDPlayerteams.
// Sets related.R.GameID appropriately.
func (o *Game) AddGameIDPlayerteams(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Playerteam) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GameID = o.GameID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `playerteam` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"GameID"}),
				strmangle.WhereClause("`", "`", 0, playerteamPrimaryKeyColumns),
			)
			values := []interface{}{o.GameID, rel.PlayerID, rel.TeamID, rel.GameID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GameID = o.GameID
		}
	}

	if o.R == nil {
		o.R = &gameR{
			GameIDPlayerteams: related,
		}
	} else {
		o.R.GameIDPlayerteams = append(o.R.GameIDPlayerteams, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerteamR{
				GameID: o,
			}
		} else {
			rel.R.GameID = o
		}
	}
	return nil
}

// Games retrieves all the records using an executor.
func Games(mods ...qm.QueryMod) gameQuery {
	mods = append(mods, qm.From("`game`"))
	return gameQuery{NewQuery(mods...)}
}

// FindGame retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGame(ctx context.Context, exec boil.ContextExecutor, gameID int, selectCols ...string) (*Game, error) {
	gameObj := &Game{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `game` where `GameID`=?", sel,
	)

	q := queries.Raw(query, gameID)

	err := q.Bind(ctx, exec, gameObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from game")
	}

	return gameObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Game) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no game provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gameColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gameInsertCacheMut.RLock()
	cache, cached := gameInsertCache[key]
	gameInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gameAllColumns,
			gameColumnsWithDefault,
			gameColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gameType, gameMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gameType, gameMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `game` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `game` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `game` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, gamePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into game")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.GameID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for game")
	}

CacheNoHooks:
	if !cached {
		gameInsertCacheMut.Lock()
		gameInsertCache[key] = cache
		gameInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Game.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Game) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	gameUpdateCacheMut.RLock()
	cache, cached := gameUpdateCache[key]
	gameUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gameAllColumns,
			gamePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update game, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `game` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, gamePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gameType, gameMapping, append(wl, gamePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update game row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for game")
	}

	if !cached {
		gameUpdateCacheMut.Lock()
		gameUpdateCache[key] = cache
		gameUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q gameQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for game")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for game")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GameSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `game` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, gamePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in game slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all game")
	}
	return rowsAff, nil
}

var mySQLGameUniqueColumns = []string{
	"GameID",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Game) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no game provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gameColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLGameUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gameUpsertCacheMut.RLock()
	cache, cached := gameUpsertCache[key]
	gameUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			gameAllColumns,
			gameColumnsWithDefault,
			gameColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			gameAllColumns,
			gamePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert game, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "game", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `game` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(gameType, gameMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gameType, gameMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for game")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(gameType, gameMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for game")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for game")
	}

CacheNoHooks:
	if !cached {
		gameUpsertCacheMut.Lock()
		gameUpsertCache[key] = cache
		gameUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Game record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Game) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Game provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gamePrimaryKeyMapping)
	sql := "DELETE FROM `game` WHERE `GameID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from game")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for game")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gameQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no gameQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from game")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for game")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GameSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(gameBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `game` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, gamePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from game slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for game")
	}

	if len(gameAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Game) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGame(ctx, exec, o.GameID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GameSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GameSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `game`.* FROM `game` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, gamePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GameSlice")
	}

	*o = slice

	return nil
}

// GameExists checks if the Game row exists.
func GameExists(ctx context.Context, exec boil.ContextExecutor, gameID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `game` where `GameID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, gameID)
	}
	row := exec.QueryRowContext(ctx, sql, gameID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if game exists")
	}

	return exists, nil
}
